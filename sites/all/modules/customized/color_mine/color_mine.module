<?php
/**
 * todo 权限系统参照node模块权限修改功能 
 */ 


function color_mine_perm()
{
    return array('Admin Color Mine', 'Modify Theme Color');
}


function color_mine_menu()
{
    $items['theme/color_mine'] = array(
    	'title' => t('Theme settings'),
        'page callback' => 'drupal_get_form',
        'page arguments' => array('color_mine_theme_setting_form'),                
        'access arguments' => array('Modify Theme Color'),        
    );
    
    $items['admin/build/themes/color_mine'] = array
    (
        'title' => t('Setting Color Extensions'),
        'page callback' => 'drupal_get_form',
        'page arguments' => array('color_mine_admin_form'),       
        'access arguments' => array('Admin Color Mine'),
        'file' => 'color_mine.admin.inc',
    );
    
    return $items;    
}

/**
 * color_mine_theme_setting_form()
 * 表单
 * @param mixed $form_state
 * @return
 */
function color_mine_theme_setting_form(&$form_state)
{    
    global $user;
    require 'color_mine.form.inc';
    $settings = color_mine_settings();
    //权限 
    /** todo 扩充权限功能 */
    if(!$_GET['styleid'])
    {
        drupal_goto(url('admin/build/themes/settings'));
            
    }        
    if(isset($settings['uid']) and $user->uid != 1  and $user->uid != $settings['uid'] )
    {
        drupal_set_message(t('Please make sure you have enough permission to do this.'));
        return $form;
    }
    $form = array(); 

    color_mine_palette_form($form, $form_state); 
    color_mine_background_settings_form($form, $settings);
    $form['#validate'][] = 'color_mine_theme_setting_form_submit_validate';
    $form['#attributes'] = array('enctype' => "multipart/form-data");
    $form['#redirect'] = array('theme/color_mine', 'styleid=' . $_GET['styleid']); 
    $form['submit'] = array
    (
        '#type' => 'submit',
        '#value' => t('Save')
    );    
    return $form;
}


function color_mine_theme() {
  return array(
    'color_mine_scheme_form' => array(
      'arguments' => array('form' => NULL),
    ),
  );
}

function color_mine_theme_setting_form_submit($form, &$form_state)
{   
  // Get theme coloring info
  if (!isset($form_state['values']['info'])) {
    return;
  }
  
  $theme = variable_get('color_mine_themeid', '');
  $info = $form_state['values']['info'];

  // Resolve palette
  $palette = $form_state['values']['palette'];
  if ($form_state['values']['scheme'] != '') {
    $scheme = explode(',', $form_state['values']['scheme']);
    foreach ($palette as $k => $color) {
      $palette[$k] = array_shift($scheme);
    }
  }

  // Make sure enough memory is available, if PHP's memory limit is compiled in.
  if (function_exists('memory_get_usage')) {
    // Fetch source image dimensions.
    $source = drupal_get_path('theme', $theme) .'/'. $info['base_image'];
    
    list($width, $height) = getimagesize($source);

    // We need at least a copy of the source and a target buffer of the same
    // size (both at 32bpp).
    $required = $width * $height * 8;
    $usage = memory_get_usage();
    $limit = parse_size(ini_get('memory_limit'));
    if ($usage + $required > $limit) {
      drupal_set_message(t('There is not enough memory available to PHP to change this theme\'s color scheme. You need at least %size more. Check the <a href="@url">PHP documentation</a> for more information.', array('%size' => format_size($usage + $required - $limit), '@url' => 'http://www.php.net/manual/en/ini.core.php#ini.sect.resource-limits')), 'error');
      return;
    }
  }

  // 删除旧文件
  /*foreach (variable_get('color_'. $theme .'_files', array()) as $file) {
    @unlink($file);
  }
  if (isset($file) && $file = dirname($file)) {
    @rmdir($file);
  }*/

  // Don't render the default colorscheme, use the standard theme instead.
  if (implode(',', color_get_palette($theme, true)) == implode(',', $palette)
    || $form_state['values']['op'] == t('Reset to defaults')) {

    return;
  }

  // Prepare target locations for generated files.
  $id = color_mine_dir();
  $paths['color'] = file_directory_path() .'/color-mine'; /** todo */
  $paths['target'] = $paths['color'] .'/'. $id;
  foreach ($paths as $path) {
    file_check_directory($path, FILE_CREATE_DIRECTORY);
  }
  $paths['target'] = $paths['target'] .'/';
  $paths['id'] = $id;
  $paths['source'] = drupal_get_path('theme', $theme) .'/';
  $paths['files'] = $paths['map'] = array();

  // Save palette and logo location.
  //variable_set('color_'. $theme .'_palette', $palette);
  //variable_set('color_'. $theme .'_logo', $paths['target'] .'logo.png');

  // Copy over neutral images.
  foreach ($info['copy'] as $file) {
    $base = basename($file);
    $source = $paths['source'] . $file;
    file_copy($source, $paths['target'] . $base);
    $paths['map'][$file] = $base;
    $paths['files'][] = $paths['target'] . $base;
  }

  // Render new images, if image provided.
  if ($info['base_image']) {
    _color_render_images($theme, $info, $paths, $palette);
  }

  // Rewrite theme stylesheets.
  $css = array();
  foreach ($info['css'] as $stylesheet) {
    // Build a temporary array with LTR and RTL files.
    $files = array();
    if (file_exists($paths['source'] . $stylesheet)) {
      $files[] = $stylesheet;

      $rtl_file = str_replace('.css', '-rtl.css', $stylesheet);
      if (file_exists($paths['source'] . $rtl_file)) {
        $files[] = $rtl_file;
      }
    }

    foreach ($files as $file) {
      // Aggregate @imports recursively for each configured top level CSS file
      // without optimization. Aggregation and optimization will be
      // handled by drupal_build_css_cache() only.
      $style = drupal_load_stylesheet($paths['source'] . $file, FALSE);

      // Return the path to where this CSS file originated from, stripping
      // off the name of the file at the end of the path.
      $base = base_path() . dirname($paths['source'] . $file) .'/';
      _drupal_build_css_path(NULL, $base);

      // Prefix all paths within this CSS file, ignoring absolute paths.
      $style = preg_replace_callback('/url\([\'"]?(?![a-z]+:|\/+)([^\'")]+)[\'"]?\)/i', '_drupal_build_css_path', $style);

      // Rewrite stylesheet with new colors.
      $style = _color_rewrite_stylesheet($theme, $info, $paths, $palette, $style);
      $base_file = basename($file);
      $css[] = $paths['target'] . $base_file;
      _color_save_stylesheet($paths['target'] . $base_file, $style, $paths);
    }
  }
  
    $directory_path = $paths['target'];
    
  //背景图片上传
    if ($file = file_save_upload('background_upload'))
    {
        
        file_check_directory($directory_path, FILE_CREATE_DIRECTORY, 'file_directory_path');
        
        $parts = pathinfo($file->filename);
        
        // Append _background.png
        $filename = $directory_path . '/background.'. $parts['extension'];
        
        // The image was saved using file_save_upload() and was added to the
        // files table as a temporary file. We'll make a copy and let the garbage
        // collector delete the original upload.
        if (file_copy($file, $filename, FILE_EXISTS_REPLACE)) {
        $_POST['default_background'] = 0;
        $_POST['background_path'] = $file->filepath;
        $_POST['toggle_background'] = 1;
        }
        $form_state['values']['background_path'] = $filename;
        //die($filename);
    }   
    
    global $user;

    //保存设置 
    $setting = array
    (
        'uid' => $user->uid,
        'palette' => array
        (
            'base' => $form_state['values']['palette']['base'],
            'link' => $form_state['values']['palette']['link'],
            'top' => $form_state['values']['palette']['top'],
            'bottom' => $form_state['values']['palette']['bottom'],
            'text' => $form_state['values']['palette']['text']
        ),
        'scheme' => $form_state['values']['scheme'],
        'background_custom' => $form_state['values']['background_custom'],
        'background_path'  => $form_state['values']['background_path'],
        'background_position' => $form_state['values']['background_position'],
        'background_repeat' => $form_state['values']['background_repeat'],
        'background_attachment' => $form_state['values']['background_attachment']
    ); 
    
    
    $ini = $directory_path . '/background.ini';
    //die($directory_path);
    file_put_contents($ini, serialize($setting));
    chmod($ini, 0644);    
    drupal_set_message(t('Theme setting saved.'));
    //print_r($setting);die;
}

function color_mine_theme_setting_form_submit_validate($form, &$form_state)
{
    color_scheme_form_validate($form, &$form_state);
}




function color_mine_style()
{
    $_GET['styleid'] = $GLOBALS['current_group']->path;
    $file = color_mine_path() . '/style.css';
    
    if(file_exists($file))
    {
        $style = '<link type="text/css" rel="stylesheet" media="all" href="/' . $file .'" />';
        if($settings = color_mine_settings() and $settings['background_custom'])
        {
            $style .= "  
            <style type='text/css'>
            #C_pageBody{              
                background-image: url(/$settings[background_path]);
                background-repeat: $settings[background_repeat];
                background-position: $settings[background_position];
                background-attachment: $settings[background_attachment];
                width:100% !important;
                padding:1em 0;
            }
            #C_context{
                width:960px;
                margin:auto;                
            }
            </style>
            ";
        }
        return $style;
    }
}

function color_mine_dir()
{
    $styleid = $_GET['styleid'] ? $_GET['styleid'] : variable_get('color_mine_styleid', ''); 
    if(!$styleid)
    {
        return;
    }
    return basename(path_to_theme()) . '_' . $styleid;
}

function color_mine_path()
{
    return file_directory_path() .'/color-mine/' . color_mine_dir();
}

function color_mine_settings()
{
    $file = rtrim(color_mine_path(), '/') .'/background.ini';
    return file_exists($file) ? unserialize(file_get_contents($file)) : array();
}