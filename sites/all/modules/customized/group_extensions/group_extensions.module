<?php
// $Id: devel.module,v 1.258.2.77 2010/08/13 16:46:59 weitzman Exp $
/*group_extensions_menu()
{
    
}*/
define('NODE_TYPE', 'group'); //节点类型

/*function group_extensions_form_alter(&$form, $form_state, $form_id)
{
    if($_GET['q'] == 'node/add/group') print_r($form_id);
}*/
//_form_group_node
function group_extensions_perm()
{
    return array(
    'create group',
    'admin group'
    );
}

function group_extensions_menu()
{
    $items['group/create'] = array
    (
        'title' => 'Start a new group!',
        'description' => 'Create a group',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('group_create'),
       
        'access arguments' => array('create group'),
        'file' => 'group_form.inc',
    );
    
    $items['group/%/comments'] = array(
    	'title' => t('All Group Reviews'),
        'page callback' => 'group_extensions_comments_list',
        'page arguments' => array(1),                
        'access callback' =>true,
        'type' => MENU_CALLBACK, 
        'file' => 'group.comment.inc',
    );
    $items['groupextension/ajax/postcomment']=array(
		'title'=>t('Post Comment'),
		'page callback'=>'group_extensions_ajax_postcomment',
		'page arguments'=>null,
		'access callback'=>TRUE,
        'type' => MENU_CALLBACK,
        'file' => 'group.comment.inc',
	);
     $items['group/%/comments/featuredcomment/%/%']=array(
		'title'=>t('Post Comment'),
		'page callback'=>'group_extensions_ajax_featured_comment',
		'page arguments'=>array(1,4,5),
		'access callback'=>TRUE,
        'type' => MENU_CALLBACK,
        'file' => 'group.comment.inc',
	);
    
        
    $items['groupextension/allmembers/%']=array(
		'title'=>t('All Members'),
		'page callback'=>'group_extensions_all_group_members',
		'page arguments'=>array(2),
		'access callback'=>TRUE,
        'type' => MENU_LOCAL_TASK,     
        'file' => 'group_extensions.members.inc',
	);
    $items['groupextension/allmembers/%/all']=array(
        'title'=>t('All Members'),		
        'type' => MENU_DEFAULT_LOCAL_TASK,   
        'file' => 'group_extensions.members.inc',
	);
    $items['groupextension/allmembers/%/leadship']=array(
        'title'=>t('The Leadship Team'),		 
        'page callback'=>'group_extensions_all_leadship_members',
		'page arguments'=>array(2),
		'access callback'=>TRUE,
        'type' => MENU_LOCAL_TASK,
        'file' => 'group_extensions.members.inc',
	);    
    
    //group forums
    $items['groupextension/%/forum']=array(
        'title'=>t('Group Forum'),		 
        'page callback'=>'group_extensions_forum',
		'page arguments'=>array(1),
		'access callback'=>TRUE,
        'type' => MENU_LOCAL_TASK,
        'file' => 'group_extensions.forum.inc',
	);
    
     $items['groupextension/%/reply']=array(
        'title'=>t('Post a reply'),		 
        'page callback'=>'group_extensions_reply_post',
		'page arguments'=>array(1),
		'access callback'=>TRUE,
        'type' => MENU_CALLBACK,
        'file' => 'group_extensions.forum.inc',
	);
    
    /*group tools */
    $items['groupextension/%/messages/send'] = array
    (
        'title' => t('Email Members'),
        'description' => 'Send email to all members',
        'page callback' => 'groupextension_tools_send_messages',
        'page arguments' => array(1),       
        'type' => MENU_CALLBACK,
        'access callback' => 'group_extensions_is_group_admin',        
        'access arguments' => array(1),        
        'file' => 'group_extensions.tools.inc',
    );
    $items['groupextension/%/manage'] = array
        (
            'title' => t('Group Settings'),
            'description' => 'Configure the group',
            'page callback' => 'groupextension_tools_manage',
            'page arguments' => array(1),       
            'type' => MENU_CALLBACK,
            'access callback' => 'group_extensions_is_group_admin',        
            'access arguments' => array(1),        
            'file' => 'group_extensions.tools.inc',
        );
    $items['groupextension/%/money'] = array
        (
            'title' => t('Money'),
            'description' => 'All the money related',
            'page callback' => 'groupextension_tools_money',
            'page arguments' => array(1),       
            'type' => MENU_CALLBACK,
            'access callback' => 'group_extensions_is_group_admin',        
            'access arguments' => array(1),        
            'file' => 'group_extensions.tools.inc',
        );
    $items['groupextension/%/checklist'] = array
        (
            'title' => t('Money'),
            'description' => 'Send email to all members',
            'page callback' => 'groupextension_tools_checklist',
            'page arguments' => array(1),       
            'type' => MENU_CALLBACK,
            'access callback' => 'group_extensions_is_group_admin',        
            'access arguments' => array(1),        
            'file' => 'group_extensions.tools.inc',
        );
    $items['groupextension/%/dues'] = array
        (
            'title' => t('Dues'),
            'description' => 'Membership Dues',
            'page callback' => 'groupextension_tools_dues',
            'page arguments' => array(1),       
            'type' => MENU_CALLBACK,
            'access callback' => 'group_extensions_is_group_admin',        
            'access arguments' => array(1),        
            'file' => 'group_extensions.tools.inc',
        );
	
	// poll
	$items['groupextension/%/poll'] = array
        (
            'title' => t('Polls'),
            'description' => '',
            'page callback' => 'groupextension_tools_poll',
            'page arguments' => array(1),       
            'type' => MENU_CALLBACK,
            'access callback' => TRUE,        
            'access arguments' => array(1),        
            'file' => 'group_extensions.tools.inc',
        );
	$items['groupextension/%/poll/open'] = array
        (
            'title' => t('Open polls'),
            'description' => '',
            'page callback' => 'groupextension_tools_poll',
            'page arguments' => array(1),       
            'type' => MENU_DEFAULT_LOCAL_TASK,
            'access callback' => TRUE,        
            'access arguments' => array(1),        
            'file' => 'group_extensions.tools.inc',
        );
	$items['groupextension/%/poll/closed'] = array
        (
            'title' => t('Closed polls'),
            'description' => '',
            'page callback' => 'groupextension_tools_poll',
            'page arguments' => array(1),       
            'type' => MENU_LOCAL_TASK,
            'access callback' => TRUE,        
            'access arguments' => array(1),        
            'file' => 'group_extensions.tools.inc',
        );
	
	$items['groupextension/%/suggest'] = array
        (
            'title' => t('Suggest a poll'),
            'description' => '',
            'page callback' => 'groupextension_tools_suggest',
            'page arguments' => array(1),       
            'type' => MENU_CALLBACK,
            'access callback' => TRUE,        
            'access arguments' => array(1),        
            'file' => 'group_extensions.tools.inc',
        );
    return $items;    
}


/* if the current use is the group admin 
*
*/

function group_extensions_is_group_admin($gid){
$node = node_load($gid); 
return og_is_group_admin($node); 
}



/**
 * Implementation of hook_theme().
 *
 *
 */
function group_extensions_theme() {
  return array(
   'group_extensions_member' => array(	 // theme one member
      'arguments' => array(
            'member'=>null,             
        ),
	),
  'group_extensions_forum_board' => array(	 // theme one forum
      'template' => 'group_extensions-forum-board',
      'arguments' => array(
            'group'=>null,
            'topics'=>null,              
        ),
       'path' => drupal_get_path('module','group_extensions').'/tpl',
	),
    
    'forum_topic_node_form' => array(
                    'template' => 'forum_topic-node-form',
                    'arguments' => array (
                            'form' => NULL,
                    ),
                    'path' => drupal_get_path('module','group_extensions').'/tpl',
     ),
     'forum_topic_show' => array(
                    'template' => 'forum-topic-show',
                    'arguments' => array (
                            'group'=>NULL,
                            'topic' => NULL,
                    ),
                    'path' => drupal_get_path('module','group_extensions').'/tpl',
     ),        
            
  
  
  );
}



function group_extensions_nodeapi(&$node, $op, $teaser, $page) 
{
    if(og_is_group_type($node->type) and $node->status != 0 and $op == 'view') 
    {
        $node_timeStamp = dateToStamp($node->field_date_valuable[0][value]);
        if(time() > $node_timeStamp)
        {
            $node->status = 0;
            node_save($node);
        }
    }    
    
    switch ($op) {
    case 'load':    
        if(og_is_group_type($node->type) ) {
             list($txt, $subscription) = og_subscriber_count_link($node);
            $node->og_member_count = (int)$txt;
            $node->featured_comments = group_extensions_get_featured_comment($node->nid); 
            
        }
        if($node->type == "forum_topic"){
            if(module_exists('statistics')) {            
                 $node->view_count = db_result(db_query('SELECT totalcount FROM {node_counter} WHERE nid = %d', $node->nid));
             } else {
            $node->view_count = 0;
            }           
        }       
        
    break;
    }
    
}


/* impl. of hook_preprocess_page
 * this function only used to cutomized the the group forum page here  
 *
 */
function group_extensions_preprocess_page(&$vars){  
   
	if(arg(0)=='node' && is_numeric(arg(1)) && arg(3) =='' ) {
		$node = $vars['node'];
        
        $curr_title = drupal_get_title();
        if($node->type == 'forum_topic') {
                $current_group = $GLOBALS['current_group'];
              
                $topic=array(
                    'id'=>$node->nid, // nid or cid
                    'ispost'=>1, 
                    'name'=>$node->name,
                    'uid'=>$node->uid,
                    'picture' => $node->picture, 
                    'grouprole' => og_is_group_admin($current_group,$node->uid) ? t('Group Organizer') : t('Group Member'),
                    'location'=>'',
                    'created'=>$node->created,
                    'content'=>$node->body,
                );
                
                $vars['content'] = _group_extension_forum_topic_header($node, $current_group);
                $vars['content'] .= theme('forum_topic_show',$current_group,  $topic);
                $vars['content'] .= group_extensions_comment_render($node, $current_group);
                $vars['content'] .= _group_extension_forum_topic_bottom($node);
        }
   }
}

/* create a subscrber link
** depend on message and notify message framework
** $op: subscribe  or unsubscribe
*/
function _group_extension_create_subscriber_link($node){
    global $user; 
    $subs = notifications_user_get_subscriptions($user->uid,'thread',$node->nid, $node, FALSE);
    if($subs) {
         foreach ($subs as $key => $sub){
            if($sub->uid == $user->uid) { //user have subscribe this
                $op = 'subscribe';
                $lable = t('Track this discussion');
            } else {
                $op = 'unsubscribe';
                $lable = t('Untrack this discussion');
            }
         }
    } else {
          $op = 'subscribe';
          $lable = t('Track this discussion');
    }
    
    $param = array(
                'uid' => $user->uid,
                'confirm' => FALSE,
                'signed' => FALSE,
                'type' => 'thread',
                'fields' => array('nid' => $node->nid),
                'event_type' => 'node',
                'destination' => TRUE,
        );
                
    $link = notifications_get_link($op,$param);    
   
    
    $subscribe_url= l($lable, $link['href'], $link['options']);
    return $subscribe_url;
}
            
            
/** private function to show the forum topic header 
**   this function must show with the _group_extension_forum_topic_bottom() function
** @param, $node, the post node
** @group, the current group 
*/
function _group_extension_forum_topic_header($node, $group){
    $output ='';
    global $base_url; 
    
    
    $icon_path = $base_url.'/'.drupal_get_path('theme','fusion_teemeet').'/images';
    $is_group_admin = og_is_group_admin($group); 
    $output .=' <div class="D_box">
        <div class="D_boxbody">
            <div class="D_boxhead">
                <p class="crumb">
                    <span class="nobr"><a href="'.$GLOBALS['current_group']->path.'">'.$GLOBALS['current_group']->title.'</a></span>
                    		<span class="nobr ts">›'.l($node->title,$GLOBALS['current_group']->path.'/'.$node->path).'</span>	
                </p>
                <h1>'.$node->title.'</h1>
                <ul class="D_actions hasIcons">';
            if($is_group_admin) {
            $output .= '<li class="canDo">
                        <a href="">
                        <img class="icon png" title="" alt="" src="'.$icon_path.'/icon_closed_on.png"> <span>Close to new replies</span>
                        </a>
                    </li>
                    
                     <li class="canDo">
                        <a href="">
                        <img class="D_icon png" src="'.$icon_path.'/icon_pinned_on.png"> <span>Pin this discussion</span>
                        </a>
                    </li> ';
            }
            $output .= '<li class="canDo">
                    <a class="orgTool sprite sprite_action page_add_icon" href="">Start a new discussion</a>
                    </li>';
         //   if(module_exists('notifications')) {
                    $output .= '<li class="canDo">'._group_extension_create_subscriber_link($node).'</li>';
          //      }
                 $output .= '<li class="canDo">
                    <a class="sprite sprite_action arrow_undo_icon" href="'.url($GLOBALS['current_group']->path.'/groupextension/'.$node->nid.'/reply').'">
                    Add a reply
                    </a>
                    </li>

                </ul>
 
            </div>
            <div class="D_boxsection isSorted">
                <table class="D_boardThread">
                    <tbody>';
   return $output; 
}

function _group_extension_forum_topic_bottom($node){
    $output ='';
    $output .= '</tbody>
                </table>
            <div style="border-top: 1px solid rgb(221, 221, 221);">
                <ul class="D_actions hasIcons">
                    <li class="canDo">
                    <a class="sprite sprite_action arrow_undo_icon" href="'.url($GLOBALS['current_group']->path.'/groupextension/'.$node->nid.'/reply').'">
                    '.t('Add a reply').'
                    </a>
                    </li>
                </ul>
            </div>

        </div>
    </div>
</div>
';
return $output;
}


/* retrieval featured commeents
**
**
*/
function group_extensions_get_featured_comment($gid) {
  
    $result = db_query('SELECT cid from {featuredcomments} WHERE gid = %d order by id desc',$gid);
    $comments = array(); 
    while($comment = db_fetch_object($result)){
        $sql = 'SELECT c.comment, u.uid, u.name ,u.picture FROM {comments} c INNER JOIN {users} u ON c.uid = u.uid WHERE c.cid = %d';
        $comments[] = db_fetch_array(db_query($sql, $comment->cid));       
    }
    return $comments; 
}


/**
 * dateToStamp()
 * 输入形如 yyyy-mm-dd 的日期返回日期时间戳
 * @param string $date
 * @return void
 */
function dateToStamp($date = '0000-00-00 ignore')
{
    $day = (int)substr($date, 8, 2);
    $month = (int)substr($date, 5, 2);
    $year = (int)substr($date, 0, 4);
    return mktime(0, 0, 0, $month, $day, $year);
}



/* Get all one user's comment for a group node
 * @param $gid, group node nid
 * @param $uid, the user uid
 * return, if there is a value, return , otherwise, 0
 */
function group_extensions_get_my_group_review($gid, $uid){
	$output = '';
        
		// Pre-process variables.
		$nid = $gid;
	
		$query = 'SELECT c.cid as cid, c.pid, c.nid, c.subject, c.comment, c.format, c.timestamp, c.name, c.mail, c.homepage, u.uid, u.name AS registered_name, u.signature, u.signature_format, u.picture, u.data, c.thread, c.status FROM {comments} c INNER JOIN {users} u ON c.uid = u.uid WHERE c.nid = %d and c.uid=%d';
        
		// Start a form, for use with comment control.
		$result = db_query($query,$gid, $uid);

		$num_rows = FALSE;
		
		global $base_path;
		$a= null; 
		while ($comment = db_fetch_object($result)) {
			$num_rows = TRUE;
            $a = $comment; 
		}

		if($num_rows) {           
			return $a; 
		} else {   
			return FALSE;
		}	
}

/* render the comments when viewing the forum topic
**
*/
function group_extensions_comment_render($node, $current_group,$cid = 0) {
  global $user;
    
    $output ='';
  if (user_access('access comments')) {
    // Pre-process variables.
    $nid = $node->nid;
    if (empty($nid)) {
      $nid = 0;
    }
    $comments_per_page = 20;


      // Multiple comment view
      $query_count = 'SELECT COUNT(*) FROM {comments} c WHERE c.nid = %d';
      $query = 'SELECT c.cid as cid, c.pid, c.nid, c.subject, c.comment, c.format, c.timestamp, c.name, c.mail, c.homepage, u.uid, u.name AS registered_name, u.signature, u.signature_format, u.picture, u.data, c.thread, c.status FROM {comments} c INNER JOIN {users} u ON c.uid = u.uid WHERE c.nid = %d';

      $query_args = array($nid);
      if (!user_access('administer comments')) {
        $query .= ' AND c.status = %d';
        $query_count .= ' AND c.status = %d';
        $query_args[] = COMMENT_PUBLISHED;
      }

      if ($order == COMMENT_ORDER_NEWEST_FIRST) {
        if ($mode == COMMENT_MODE_FLAT_COLLAPSED || $mode == COMMENT_MODE_FLAT_EXPANDED) {
          $query .= ' ORDER BY c.cid DESC';
        }
        else {
          $query .= ' ORDER BY c.thread DESC';
        }
      }
      else if ($order == COMMENT_ORDER_OLDEST_FIRST) {
        if ($mode == COMMENT_MODE_FLAT_COLLAPSED || $mode == COMMENT_MODE_FLAT_EXPANDED) {
          $query .= ' ORDER BY c.cid';
        }
        else {
          // See comment above. Analysis reveals that this doesn't cost too
          // much. It scales much much better than having the whole comment
          // structure.
          $query .= ' ORDER BY SUBSTRING(c.thread, 1, (LENGTH(c.thread) - 1))';
        }
      }
      $query = db_rewrite_sql($query, 'c', 'cid');
      $query_count = db_rewrite_sql($query_count, 'c', 'cid');

      // Start a form, for use with comment control.
      $result = pager_query($query, $comments_per_page, 0, $query_count, $query_args);

      $divs = 0;
      $num_rows = FALSE;
      $comments = '';
     
      while ($comment = db_fetch_object($result)) {
        $comment = drupal_unpack($comment);
         $topic=array(
                    'id'=>$comment->cid, // nid or cid
                    'ispost'=>0,
                    'name'=>$comment->registered_name,
                    'uid'=>$comment->uid,
                    'picture' => $comment->picture, 
                    'grouprole' => og_is_group_admin($current_group,$comment->uid) ? t('Group Organizer') : t('Group Member'),
                    'location'=>'',
                    'created'=>$comment->timestamp,
                    'content'=>$comment->comment,
        );
        $output .=  theme('forum_topic_show',$current_group,  $topic);
      }
      

      
   
  
  }
  return $output;
}


/**
 * Event Payment Form
 * @return $form
 * @author nemo
 */
function event_payment_form() { 
	$gid = arg(3);
	$gids = group_extensions_get_nid_by_group($gid);
	$options = array();
	foreach ($gids as $_gid) {
		$group = node_load($_gid);
		$options[$_gid] = $group->title . ' -- ' . date('d/m/Y', $group->changed);
	}	
	
	$form = array();
	
	$group_alias = drupal_get_path_alias('node/' . $gid);
	//$form['#action'] = url($group_alias . '/groupextension/' . $gid . '/money');
	
	$form['form-prefix'] = array(    
    	'#value' => '<div class="D_form">', 
	);	
	
	$form['form_title'] = array(
		'#prefix' => '<h2>',
		'#value' => t('Event Payment'),
		'#suffix' => '</h2>',
	);
	
	$form['event'] = array(
		'#type' => 'select',
		'#title' => t('Event'),
		'#options' =>$options,
		'#prefix' => '<div class="element">',
		'#suffix' => '</div>',

	);
	
	$form['member'] = array(
		'#type' => 'textfield',
		'#title' => t('Member'),
		'#autocomplete_path' => 'user/autocomplete',
		'#size' => '30',
		'#prefix' => '<div class="element">',
		'#suffix' => '</div>',
    );
	
	$form['date'] = array(
		'#type' => 'date',
		'#title' =>t('Date'),
		'#prefix' => '<div class="element">',
		'#suffix' => '</div>',
	);
	
	$form['quantity'] = array(
		'#type' => 'textfield',
		'#title' => t('Quantity'),
		'#size' => '15',
		'#prefix' => '<div class="element">',
		'#suffix' => '</div>',
		'#element_validate' => array('quantity_validate'),
		'#required' => TRUE,
    );
	
	$form['total'] = array(
		'#type' => 'textfield',
		'#title' => t('Total Amount'),
		'#size' => '15',
		'#field_prefix' => '￥',
		'#default_value' => '0.00',
		'#prefix' => '<div class="element">',
		'#suffix' => '</div>',
		'#required' => TRUE,
		'#element_validate' => array('total_validate'),
    );
	
	$form['submit'] = array(
		'#type' => 'submit', 
		'#value' => t('Record Event Payment'),
		'#attributes' => array('class' => 'D_submit'),
		'#prefix' => '<div class="footElement">',
		'#suffix' => '</div>',
	);
	
	$form['form-suffix'] = array(    
    	'#value' => '</div>', 
	);
	
	$form['gid'] = array(
		'#type' => 'hidden', 
		'#value' => $gid, 
    );
	
	$form['type'] = array(
		'#type' => 'hidden', 
		'#value' => 'event_payment', 
    );
	
	$form['#validate'][] = 'group_extensions_payment_form_validate';
	
	$form['#submit'][] = 'group_extensions_payment_form_submit';
	
	return $form;
}

/**
 * hook_colorbox_form_access
 * @author nemo
 */
function group_extensions_colorbox_form_access($form_id){
	$forms = array('event_payment_form', 'sponsor_payment_form', 'other_payment_form', 'expense_form', 'dues_form');
	
	if (in_array($form_id, $forms)) {
		return TRUE;
	}
}

/**
 * get nid which belongs to a specific group
 * @param  $gid Inter
 * @param  $type String : node type
 * @return $nids Array
 * @author nemo
 */

function group_extensions_get_nid_by_group($gid, $type = 'event') {
	$sql = 'SELECT node.nid AS nid FROM {node} node ' .
			'INNER JOIN {og_ancestry} og_ancestry ON node.nid = og_ancestry.nid ' .
			"WHERE og_ancestry.group_nid = %d AND node.type = '%s'";
	
	$results = db_query($sql, $gid, $type);
	
	$nids = array();
	while ($nid = db_fetch_object($results)) {
		$nids[] = $nid->nid;
	}
	
	return $nids;
}
/**
 * @author nemo
 */
function quantity_validate($element, &$form_state) {
	$form_state['values']['quantity'] = (int)$element['#value'];
   if ($form_state['values']['quantity'] <= 0) {
     form_error($element, t('Quantity field is illegal.'));
   }
}

/**
 * @author nemo
 */
function total_validate($element, &$form_state) {
	$form_state['values']['total'] = (int)$element['#value'];
   if ($form_state['values']['total'] <= 0) {
     form_error($element, t('Total Amount field is illegal.'));
   }
}

/**
 * @author nemo
 */
function group_extensions_payment_form_validate($form, &$form_state) {
	$gid = $form_state['values']['gid'];
	if($errors = form_get_errors()){
		$group_alias = drupal_get_path_alias('node/' . $gid);
		drupal_goto($group_alias . '/groupextension/' . $gid . '/money');
	}	
}

/**
 * @author nemo
 */
function group_extensions_payment_form_submit($form, &$form_state) {
	$gid = $form_state['values']['gid'];
	$values = $form_state['values'];
	$date = mktime(0, 0, 0, $values['date']['month'], $values['date']['day'], $values['date']['year']);
	$type = $form_state['values']['type'];
	
	db_query("insert into {og_transaction} (tid, gid, type, amount, date) 
				VALUES (null, %d, '%s', '%s', %d)", 
				$values['gid'], $type, $values['total'], $date);
	drupal_set_message(t('Transaction is recorded successfully'));
	$group_alias = drupal_get_path_alias('node/' . $gid);
	drupal_goto($group_alias . '/groupextension/' . $gid . '/money');
}

/**
 * Get transaction which belongs to a specific group
 * @param  $gid Inter
 * @return $transactions Array
 * @author nemo
 */

function group_extensions_get_transactions_by_group($gid) {
	$sql = 'SELECT * FROM {og_transaction} ot ' .
			'WHERE ot.gid = %d';
	
	$results = db_query($sql, $gid);
	
	$transactions = array();
	while ($t = db_fetch_array($results)) {
		$transactions[] = $t;
	}
	
	return $transactions;
}


/**
 * Sponsor Payment Form
 * @return $form
 * @author nemo
 */
function sponsor_payment_form() { 
	$gid = arg(3);
	
	$form['form-prefix'] = array(    
    	'#value' => '<div class="D_form">', 
	);	
	
	$form['form_title'] = array(
		'#prefix' => '<h2>',
		'#value' => t('Sponsor Payment'),
		'#suffix' => '</h2>',
	);
	
	$form['sponsor'] = array(
		'#type' => 'textfield',
		'#title' => t('Sponsor'),
		'#size' => '60',
		'#prefix' => '<div class="element">',
		'#suffix' => '</div>',
    );
	
	$form['date'] = array(
		'#type' => 'date',
		'#title' =>t('Date'),
		'#prefix' => '<div class="element">',
		'#suffix' => '</div>',
	);
	
	$form['total'] = array(
		'#type' => 'textfield',
		'#title' => t('Total Amount'),
		'#size' => '15',
		'#field_prefix' => '￥',
		'#default_value' => '0.00',
		'#prefix' => '<div class="element">',
		'#suffix' => '</div>',
		'#required' => TRUE,
		'#element_validate' => array('total_validate'),
    );
	
	$form['submit'] = array(
		'#type' => 'submit', 
		'#value' => t('Record Sponsor Payment'),
		'#attributes' => array('class' => 'D_submit'),
		'#prefix' => '<div class="footElement">',
		'#suffix' => '</div>',
	);
	
	$form['form-suffix'] = array(    
    	'#value' => '</div>', 
	);
	
	$form['gid'] = array(
		'#type' => 'hidden', 
		'#value' => $gid, 
    );
	
	$form['type'] = array(
		'#type' => 'hidden', 
		'#value' => 'sponsor_payment', 
    );
	
	$form['#validate'][] = 'group_extensions_payment_form_validate';
		
	$form['#submit'][] = 'group_extensions_payment_form_submit';
	
	return $form;
}

/**
 * Other Payment Form
 * @return $form
 * @author nemo
 */
function other_payment_form() { 
	$gid = arg(3);
	
	$form['form-prefix'] = array(    
    	'#value' => '<div class="D_form">', 
	);	
	
	$form['form_title'] = array(
		'#prefix' => '<h2>',
		'#value' => t('Other Income'),
		'#suffix' => '</h2>',
	);
	
	$form['other'] = array(
		'#type' => 'textfield',
		'#title' => t('other'),
		'#size' => '60',
		'#prefix' => '<div class="element">',
		'#suffix' => '</div>',
    );
	
	$form['date'] = array(
		'#type' => 'date',
		'#title' =>t('Date'),
		'#prefix' => '<div class="element">',
		'#suffix' => '</div>',
	);
	
	$form['total'] = array(
		'#type' => 'textfield',
		'#title' => t('Total Amount'),
		'#size' => '15',
		'#field_prefix' => '￥',
		'#default_value' => '0.00',
		'#prefix' => '<div class="element">',
		'#suffix' => '</div>',
		'#required' => TRUE,
		'#element_validate' => array('total_validate'),
    );
	
	$form['submit'] = array(
		'#type' => 'submit', 
		'#value' => t('Record Other Income'),
		'#attributes' => array('class' => 'D_submit'),
		'#prefix' => '<div class="footElement">',
		'#suffix' => '</div>',
	);
	
	$form['form-suffix'] = array(    
    	'#value' => '</div>', 
	);
	
	$form['gid'] = array(
		'#type' => 'hidden', 
		'#value' => $gid, 
    );
	
	$form['type'] = array(
		'#type' => 'hidden', 
		'#value' => 'other_payment', 
    );
	
	$form['#validate'][] = 'group_extensions_payment_form_validate';
		
	$form['#submit'][] = 'group_extensions_payment_form_submit';
	
	return $form;
}

/**
 * Espense Form
 * @return $form
 * @author nemo
 */
function expense_form() { 
	$gid = arg(3);
	
	$form['form-prefix'] = array(    
    	'#value' => '<div class="D_form">', 
	);	
	
	$form['form_title'] = array(
		'#prefix' => '<h2>',
		'#value' => t('Expense'),
		'#suffix' => '</h2>',
	);
	
	$form['expense'] = array(
		'#type' => 'textfield',
		'#title' => t('other'),
		'#size' => '60',
		'#prefix' => '<div class="element">',
		'#suffix' => '</div>',
    );
	
	$form['date'] = array(
		'#type' => 'date',
		'#title' =>t('Date'),
		'#prefix' => '<div class="element">',
		'#suffix' => '</div>',
	);
	
	$form['total'] = array(
		'#type' => 'textfield',
		'#title' => t('Total Amount'),
		'#size' => '15',
		'#field_prefix' => '￥',
		'#default_value' => '0.00',
		'#prefix' => '<div class="element">',
		'#suffix' => '</div>',
		'#required' => TRUE,
		'#element_validate' => array('total_validate'),
    );
	
	$form['submit'] = array(
		'#type' => 'submit', 
		'#value' => t('Record Expense'),
		'#attributes' => array('class' => 'D_submit'),
		'#prefix' => '<div class="footElement">',
		'#suffix' => '</div>',
	);
	
	$form['form-suffix'] = array(    
    	'#value' => '</div>', 
	);
	
	$form['gid'] = array(
		'#type' => 'hidden', 
		'#value' => $gid, 
    );
	
	$form['type'] = array(
		'#type' => 'hidden', 
		'#value' => 'expense', 
    );
	
	$form['#validate'][] = 'group_extensions_payment_form_validate';
		
	$form['#submit'][] = 'group_extensions_payment_form_submit';
	
	return $form;
}

/**
 * Other Payment Form
 * @return $form
 * @author nemo
 */
function dues_form() { 
	$gid = arg(3);
	$group_alias = drupal_get_path_alias('node/' . $gid);
	
	$form['form-prefix'] = array(    
    	'#value' => '<div class="D_form">', 
	);	
	
	$dues = db_result(db_query('select dues from {og_dues} where gid = %d', $gid)) ;
	if (!$dues) {
		$form['form_title'] = array(
			'#prefix' => '<h2>',
			'#value' => t('Set up Membership dues'),
			'#suffix' => '</h2><br/>',
		);
		
		$form['form_footer'] = array(
			'#value' => t('Set up Membership dues') . '<br/><br/>' . l('To add a transaction you must set up Membership dues.', $group_alias . '/groupextension/' . $gid . '/dues'),
			'#prefix' => '<div class="footElement">',
			'#suffix' => '</div>',
		);
	}else{
		$form['form_title'] = array(
			'#prefix' => '<h2>',
			'#value' => t('Membership dues'),
			'#suffix' => '</h2>',
		);
		
		$form['member'] = array(
			'#type' => 'textfield',
			'#title' => t('Member'),
			'#autocomplete_path' => 'user/autocomplete',
			'#size' => '30',
			'#prefix' => '<div class="element">',
			'#suffix' => '</div>',
		);
		
		$form['total'] = array(
			'#type' => 'textfield', 
			'#value' => $dues, 
			'#attributes' => array('disabled' => TRUE),
			'#prefix' => '<div class="element">',
			'#suffix' => '</div>',
			'#size' => '15',
			'#field_prefix' => '￥',
			'#field_suffix' => l('Change the membership dues', $group_alias . '/groupextension/' . $gid . '/dues'),
		);
		
		$form['submit'] = array(
			'#type' => 'submit', 
			'#value' => t('Record Membership dues'),
			'#attributes' => array('class' => 'D_submit'),
			'#prefix' => '<div class="footElement">',
			'#suffix' => '</div>',
		);
		
		$form['gid'] = array(
			'#type' => 'hidden', 
			'#value' => $gid, 
		);
		
		$form['type'] = array(
			'#type' => 'hidden', 
			'#value' => 'dues', 
		);

		$form['#validate'][] = 'group_extensions_payment_form_validate';

		$form['#submit'][] = 'group_extensions_payment_form_submit';
	}

	$form['form-suffix'] = array(    
		'#value' => '</div>', 
	);
	
	return $form;
}

/**
 * Get group money
 * @param  $gid Inter
  * @param $type String(dues, event_payment, sponsor_payment, other_payment, expense)
 * @return  Float
 * @author nemo
 */

function group_extensions_get_money_by_group($gid, $type = 'dues') {
	$sql = "SELECT SUM(amount) FROM {og_transaction} WHERE gid = %d AND type = '%s' ";
	
	return  db_result(db_query($sql, $gid, $type));	
}

/**
 * Get group dues
 * @param  $gid Inter
 * @return  Float
 * @author nemo
 */
function group_extensions_get_dues_by_group($gid) {
	$sql = "SELECT dues FROM {og_dues} WHERE gid = %d";
	
	return  db_result(db_query($sql, $gid));	
}

/**
 * Get group polls
 * @param  $gid Inter
 * @return $polls Array
 * @author nemo
 */
function group_extensions_get_poll_by_group($gid, $active = 1) {
	$sql = db_rewrite_sql("SELECT n.nid, n.title, p.active, n.created, SUM(c.chvotes) AS votes FROM {node} n 
						INNER JOIN {poll} p ON n.nid = p.nid 
						INNER JOIN {poll_choices} c ON n.nid = c.nid 
						INNER JOIN {og_ancestry} og_ancestry ON n.nid = og_ancestry.nid
						WHERE n.status = 1 AND og_ancestry.group_nid = %d AND p.active = %d 
						GROUP BY n.nid 
						ORDER BY n.created DESC");

	$results = db_query($sql, $gid, $active);
	
	$polls = array();
	while ($poll = db_fetch_array($results)) {
		$polls[] = $poll;
	}
	
	return $polls;
}