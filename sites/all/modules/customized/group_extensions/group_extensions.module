<?php
// $Id: devel.module,v 1.258.2.77 2010/08/13 16:46:59 weitzman Exp $
/*group_extensions_menu()
{
    
}*/
define('NODE_TYPE', 'group'); //节点类型

/*function group_extensions_form_alter(&$form, $form_state, $form_id)
{
    if($_GET['q'] == 'node/add/group') print_r($form_id);
}*/
//_form_group_node
function group_extensions_perm()
{
    return array(
    'create group',
    'admin group'
    );
}

function group_extensions_menu()
{
    $items['group/create'] = array
    (
        'title' => 'Start a new group!',
        'description' => 'Create a group',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('group_create'),
       
        'access arguments' => array('create group'),
        'file' => 'group_form.inc',
    );
    
    $items['group/%/comments'] = array(
    	'title' => t('All Group Reviews'),
        'page callback' => 'group_extensions_comments_list',
        'page arguments' => array(1),                
        'access callback' =>true,
        'type' => MENU_CALLBACK, 
        'file' => 'group.comment.inc',
    );
    $items['groupextension/ajax/postcomment']=array(
		'title'=>t('Post Comment'),
		'page callback'=>'group_extensions_ajax_postcomment',
		'page arguments'=>null,
		'access callback'=>TRUE,
        'type' => MENU_CALLBACK,
        'file' => 'group.comment.inc',
	);
     $items['group/%/comments/featuredcomment/%/%']=array(
		'title'=>t('Post Comment'),
		'page callback'=>'group_extensions_ajax_featured_comment',
		'page arguments'=>array(1,4,5),
		'access callback'=>TRUE,
        'type' => MENU_CALLBACK,
        'file' => 'group.comment.inc',
	);
    
        
    $items['groupextension/allmembers/%']=array(
		'title'=>t('All Members'),
		'page callback'=>'group_extensions_all_group_members',
		'page arguments'=>array(2),
		'access callback'=>TRUE,
        'type' => MENU_LOCAL_TASK,     
        'file' => 'group_extensions.members.inc',
	);
    $items['groupextension/allmembers/%/all']=array(
        'title'=>t('All Members'),		
        'type' => MENU_DEFAULT_LOCAL_TASK,   
        'file' => 'group_extensions.members.inc',
	);
    $items['groupextension/allmembers/%/leadship']=array(
        'title'=>t('The Leadship Team'),		 
        'page callback'=>'group_extensions_all_leadship_members',
		'page arguments'=>array(2),
		'access callback'=>TRUE,
        'type' => MENU_LOCAL_TASK,
        'file' => 'group_extensions.members.inc',
	);    
    
    //group forums
    $items['groupextension/%/forum']=array(
        'title'=>t('Group Forum'),		 
        'page callback'=>'group_extensions_forum',
		'page arguments'=>array(1),
		'access callback'=>TRUE,
        'type' => MENU_LOCAL_TASK,
        'file' => 'group_extensions.forum.inc',
	);
    
     $items['groupextension/%/reply']=array(
        'title'=>t('Post a reply'),		 
        'page callback'=>'group_extensions_reply_post',
		'page arguments'=>array(1),
		'access callback'=>TRUE,
        'type' => MENU_CALLBACK,
        'file' => 'group_extensions.forum.inc',
	);
    
    /*group tools */
    $items['groupextension/%/messages/send'] = array
    (
        'title' => t('Email Members'),
        'description' => 'Send email to all members',
        'page callback' => 'groupextension_tools_send_messages',
        'page arguments' => array(1),       
        'type' => MENU_CALLBACK,
        'access callback' => 'group_extensions_is_group_admin',        
        'access arguments' => array(1),        
        'file' => 'group_extensions.tools.inc',
    );
    $items['groupextension/%/manage'] = array
        (
            'title' => t('Group Settings'),
            'description' => 'Configure the group',
            'page callback' => 'groupextension_tools_manage',
            'page arguments' => array(1),       
            'type' => MENU_CALLBACK,
            'access callback' => 'group_extensions_is_group_admin',        
            'access arguments' => array(1),        
            'file' => 'group_extensions.tools.inc',
        );
    $items['groupextension/%/money'] = array
        (
            'title' => t('Money'),
            'description' => 'All the money related',
            'page callback' => 'groupextension_tools_money',
            'page arguments' => array(1),       
            'type' => MENU_CALLBACK,
            'access callback' => 'group_extensions_is_group_admin',        
            'access arguments' => array(1),        
            'file' => 'group_extensions.tools.inc',
        );
    $items['groupextension/%/checklist'] = array
        (
            'title' => t('Money'),
            'description' => 'Send email to all members',
            'page callback' => 'groupextension_tools_checklist',
            'page arguments' => array(1),       
            'type' => MENU_CALLBACK,
            'access callback' => 'group_extensions_is_group_admin',        
            'access arguments' => array(1),        
            'file' => 'group_extensions.tools.inc',
        );    
    
    return $items;    
}


/* if the current use is the group admin 
*
*/

function group_extensions_is_group_admin($gid){
$node = node_load($gid); 
return og_is_group_admin($node); 
}



/**
 * Implementation of hook_theme().
 *
 *
 */
function group_extensions_theme() {
  return array(
   'group_extensions_member' => array(	 // theme one member
      'arguments' => array(
            'member'=>null,             
        ),
	),
  'group_extensions_forum_board' => array(	 // theme one forum
      'template' => 'group_extensions-forum-board',
      'arguments' => array(
            'group'=>null,
            'topics'=>null,              
        ),
       'path' => drupal_get_path('module','group_extensions').'/tpl',
	),
    
    'forum_topic_node_form' => array(
                    'template' => 'forum_topic-node-form',
                    'arguments' => array (
                            'form' => NULL,
                    ),
                    'path' => drupal_get_path('module','group_extensions').'/tpl',
     ),
     'forum_topic_show' => array(
                    'template' => 'forum-topic-show',
                    'arguments' => array (
                            'group'=>NULL,
                            'topic' => NULL,
                    ),
                    'path' => drupal_get_path('module','group_extensions').'/tpl',
     ),        
            
  
  
  );
}



function group_extensions_nodeapi(&$node, $op, $teaser, $page) 
{
    if(og_is_group_type($node->type) and $node->status != 0 and $op == 'view') 
    {
        $node_timeStamp = dateToStamp($node->field_date_valuable[0][value]);
        if(time() > $node_timeStamp)
        {
            $node->status = 0;
            node_save($node);
        }
    }    
    
    switch ($op) {
    case 'load':    
        if(og_is_group_type($node->type) ) {
             list($txt, $subscription) = og_subscriber_count_link($node);
            $node->og_member_count = (int)$txt;
            $node->featured_comments = group_extensions_get_featured_comment($node->nid); 
            
        }
        if($node->type == "forum_topic"){
            if(module_exists('statistics')) {            
                 $node->view_count = db_result(db_query('SELECT totalcount FROM {node_counter} WHERE nid = %d', $node->nid));
             } else {
            $node->view_count = 0;
            }           
        }       
        
    break;
    }
    
}

/* impl. of hook_preprocess_page
 * this function only used to cutomized the the group forum page here  
 *
 */
function group_extensions_preprocess_page(&$vars){  
   
	if(arg(0)=='node' && is_numeric(arg(1)) && arg(3) =='' ) {
		$node = $vars['node'];
        
        $curr_title = drupal_get_title();
        if($node->type == 'forum_topic') {
                $current_group = $GLOBALS['current_group'];
              
                $topic=array(
                    'id'=>$node->nid, // nid or cid
                    'ispost'=>1, 
                    'name'=>$node->name,
                    'uid'=>$node->uid,
                    'picture' => $node->picture, 
                    'grouprole' => og_is_group_admin($current_group,$node->uid) ? t('Group Organizer') : t('Group Member'),
                    'location'=>'',
                    'created'=>$node->created,
                    'content'=>$node->body,
                );
                
                $vars['content'] = _group_extension_forum_topic_header($node, $current_group);
                $vars['content'] .= theme('forum_topic_show',$current_group,  $topic);
                $vars['content'] .= group_extensions_comment_render($node, $current_group);
                $vars['content'] .= _group_extension_forum_topic_bottom($node);
        }
   }
}

/* create a subscrber link
** depend on message and notify message framework
** $op: subscribe  or unsubscribe
*/
function _group_extension_create_subscriber_link($node){
    global $user; 
    $subs = notifications_user_get_subscriptions($user->uid,'thread',$node->nid, $node, FALSE);
    if($subs) {
         foreach ($subs as $key => $sub){
            if($sub->uid == $user->uid) { //user have subscribe this
                $op = 'subscribe';
                $lable = t('Track this discussion');
            } else {
                $op = 'unsubscribe';
                $lable = t('Untrack this discussion');
            }
         }
    } else {
          $op = 'subscribe';
          $lable = t('Track this discussion');
    }
    
    $param = array(
                'uid' => $user->uid,
                'confirm' => FALSE,
                'signed' => FALSE,
                'type' => 'thread',
                'fields' => array('nid' => $node->nid),
                'event_type' => 'node',
                'destination' => TRUE,
        );
                
    $link = notifications_get_link($op,$param);    
   
    
    $subscribe_url= l($lable, $link['href'], $link['options']);
    return $subscribe_url;
}
            
            
/** private function to show the forum topic header 
**   this function must show with the _group_extension_forum_topic_bottom() function
** @param, $node, the post node
** @group, the current group 
*/
function _group_extension_forum_topic_header($node, $group){
    $output ='';
    global $base_url; 
    
    
    $icon_path = $base_url.'/'.drupal_get_path('theme','fusion_teemeet').'/images';
    $is_group_admin = og_is_group_admin($group); 
    $output .=' <div class="D_box">
        <div class="D_boxbody">
            <div class="D_boxhead">
                <p class="crumb">
                    <span class="nobr"><a href="'.$GLOBALS['current_group']->path.'">'.$GLOBALS['current_group']->title.'</a></span>
                    		<span class="nobr ts">›'.l($node->title,$GLOBALS['current_group']->path.'/'.$node->path).'</span>	
                </p>
                <h1>'.$node->title.'</h1>
                <ul class="D_actions hasIcons">';
            if($is_group_admin) {
            $output .= '<li class="canDo">
                        <a href="">
                        <img class="icon png" title="" alt="" src="'.$icon_path.'/icon_closed_on.png"> <span>Close to new replies</span>
                        </a>
                    </li>
                    
                     <li class="canDo">
                        <a href="">
                        <img class="D_icon png" src="'.$icon_path.'/icon_pinned_on.png"> <span>Pin this discussion</span>
                        </a>
                    </li> ';
            }
            $output .= '<li class="canDo">
                    <a class="orgTool sprite sprite_action page_add_icon" href="">Start a new discussion</a>
                    </li>';
         //   if(module_exists('notifications')) {
                    $output .= '<li class="canDo">'._group_extension_create_subscriber_link($node).'</li>';
          //      }
                 $output .= '<li class="canDo">
                    <a class="sprite sprite_action arrow_undo_icon" href="'.url($GLOBALS['current_group']->path.'/groupextension/'.$node->nid.'/reply').'">
                    Add a reply
                    </a>
                    </li>

                </ul>
 
            </div>
            <div class="D_boxsection isSorted">
                <table class="D_boardThread">
                    <tbody>';
   return $output; 
}

function _group_extension_forum_topic_bottom($node){
    $output ='';
    $output .= '</tbody>
                </table>
            <div style="border-top: 1px solid rgb(221, 221, 221);">
                <ul class="D_actions hasIcons">
                    <li class="canDo">
                    <a class="sprite sprite_action arrow_undo_icon" href="'.url($GLOBALS['current_group']->path.'/groupextension/'.$node->nid.'/reply').'">
                    '.t('Add a reply').'
                    </a>
                    </li>
                </ul>
            </div>

        </div>
    </div>
</div>
';
return $output;
}
/**
 * group_extensions_form_alter()
 * 增加color模块支持每个节点自定义颜色的功能
 * @param mixed $form
 * @param mixed $form_state
 * @param mixed $form_id
 * @return void
 */


function group_extensions_form_alter(&$form, &$form_state, $form_id) {
 $current_group = $GLOBALS['current_group'];
 
  if ($form_id == 'forum_topic_node_form') {
        
        $form['og_nodeapi']['#prefix'] = '<div style="display:none;">';
        $form['og_nodeapi']['#suffix'] = '</div>';
        unset($form['body_field']['format']);
        $form['#theme']= 'forum_topic_node_form';
        $form['#redirect'] = url($current_group->path.'/groupextension/'.$current_group->nid.'/forum/');
   }
    // Insert the color changer into the theme settings page.
    if (module_exists('color') && $form_id == 'system_theme_settings' && color_get_info(arg(4)))
    {
        if($key = array_search( 'color_scheme_form_submit', $form['#submit']))
        {
            $form['#submit'][$key] = 'grounp_extensions_color_scheme_form_submit';
        }        
    }
}



function grounp_extensions_color_scheme_form_submit($form, &$form_state)
{
// Get theme coloring info
  if (!isset($form_state['values']['info'])) {
    return;
  }
  $theme = $form_state['values']['theme'];
  $info = $form_state['values']['info'];

  // Resolve palette
  $palette = $form_state['values']['palette'];
  if ($form_state['values']['scheme'] != '') {
    $scheme = explode(',', $form_state['values']['scheme']);
    foreach ($palette as $k => $color) {
      $palette[$k] = array_shift($scheme);
    }
  }

  // Make sure enough memory is available, if PHP's memory limit is compiled in.
  if (function_exists('memory_get_usage')) {
    // Fetch source image dimensions.
    $source = drupal_get_path('theme', $theme) .'/'. $info['base_image'];
    list($width, $height) = getimagesize($source);

    // We need at least a copy of the source and a target buffer of the same
    // size (both at 32bpp).
    $required = $width * $height * 8;
    $usage = memory_get_usage();
    $limit = parse_size(ini_get('memory_limit'));
    if ($usage + $required > $limit) {
      drupal_set_message(t('There is not enough memory available to PHP to change this theme\'s color scheme. You need at least %size more. Check the <a href="@url">PHP documentation</a> for more information.', array('%size' => format_size($usage + $required - $limit), '@url' => 'http://www.php.net/manual/en/ini.core.php#ini.sect.resource-limits')), 'error');
      return;
    }
  }

  // 删除旧文件
  /*foreach (variable_get('color_'. $theme .'_files', array()) as $file) {
    @unlink($file);
  }
  if (isset($file) && $file = dirname($file)) {
    @rmdir($file);
  }*/

  // Don't render the default colorscheme, use the standard theme instead.
  if (implode(',', color_get_palette($theme, true)) == implode(',', $palette)
    || $form_state['values']['op'] == t('Reset to defaults')) {
    variable_del('color_'. $theme .'_palette');
    variable_del('color_'. $theme .'_stylesheets');
    variable_del('color_'. $theme .'_logo');
    variable_del('color_'. $theme .'_files');
    variable_del('color_'. $theme .'_screenshot');
    return;
  }

  // Prepare target locations for generated files.
  $id = $GLOBALS['current_group']->path;
  $paths['color'] = file_directory_path() .'/color';
  $paths['target'] = $paths['color'] .'/'. $id;
  foreach ($paths as $path) {
    file_check_directory($path, FILE_CREATE_DIRECTORY);
  }
  $paths['target'] = $paths['target'] .'/';
  $paths['id'] = $id;
  $paths['source'] = drupal_get_path('theme', $theme) .'/';
  $paths['files'] = $paths['map'] = array();

  // Save palette and logo location.
  variable_set('color_'. $theme .'_palette', $palette);
  variable_set('color_'. $theme .'_logo', $paths['target'] .'logo.png');

  // Copy over neutral images.
  foreach ($info['copy'] as $file) {
    $base = basename($file);
    $source = $paths['source'] . $file;
    file_copy($source, $paths['target'] . $base);
    $paths['map'][$file] = $base;
    $paths['files'][] = $paths['target'] . $base;
  }

  // Render new images, if image provided.
  if ($info['base_image']) {
    _color_render_images($theme, $info, $paths, $palette);
  }

  // Rewrite theme stylesheets.
  $css = array();
  foreach ($info['css'] as $stylesheet) {
    // Build a temporary array with LTR and RTL files.
    $files = array();
    if (file_exists($paths['source'] . $stylesheet)) {
      $files[] = $stylesheet;

      $rtl_file = str_replace('.css', '-rtl.css', $stylesheet);
      if (file_exists($paths['source'] . $rtl_file)) {
        $files[] = $rtl_file;
      }
    }

    foreach ($files as $file) {
      // Aggregate @imports recursively for each configured top level CSS file
      // without optimization. Aggregation and optimization will be
      // handled by drupal_build_css_cache() only.
      $style = drupal_load_stylesheet($paths['source'] . $file, FALSE);

      // Return the path to where this CSS file originated from, stripping
      // off the name of the file at the end of the path.
      $base = base_path() . dirname($paths['source'] . $file) .'/';
      _drupal_build_css_path(NULL, $base);

      // Prefix all paths within this CSS file, ignoring absolute paths.
      $style = preg_replace_callback('/url\([\'"]?(?![a-z]+:|\/+)([^\'")]+)[\'"]?\)/i', '_drupal_build_css_path', $style);

      // Rewrite stylesheet with new colors.
      $style = _color_rewrite_stylesheet($theme, $info, $paths, $palette, $style);
      $base_file = basename($file);
      $css[] = $paths['target'] . $base_file;
      _color_save_stylesheet($paths['target'] . $base_file, $style, $paths);
    }
  }

  // Maintain list of files.
  //variable_set('color_'. $theme .'_stylesheets', $css);
  //variable_set('color_'. $theme .'_files', $paths['files']);      
}

function grounp_extensions_color_scheme_form_submit_validate($form, &$form_state)
{
    color_scheme_form_validate($form, &$form_state);
}


/* retrieval featured commeents
**
**
*/
function group_extensions_get_featured_comment($gid) {
  
    $result = db_query('SELECT cid from {featuredcomments} WHERE gid = %d order by id desc',$gid);
    $comments = array(); 
    while($comment = db_fetch_object($result)){
        $sql = 'SELECT c.comment, u.uid, u.name ,u.picture FROM {comments} c INNER JOIN {users} u ON c.uid = u.uid WHERE c.cid = %d';
        $comments[] = db_fetch_array(db_query($sql, $comment->cid));       
    }
    return $comments; 
}


/**
 * dateToStamp()
 * 输入形如 yyyy-mm-dd 的日期返回日期时间戳
 * @param string $date
 * @return void
 */
function dateToStamp($date = '0000-00-00 ignore')
{
    $day = (int)substr($date, 8, 2);
    $month = (int)substr($date, 5, 2);
    $year = (int)substr($date, 0, 4);
    return mktime(0, 0, 0, $month, $day, $year);
}



/* Get all one user's comment for a group node
 * @param $gid, group node nid
 * @param $uid, the user uid
 * return, if there is a value, return , otherwise, 0
 */
function group_extensions_get_my_group_review($gid, $uid){
	$output = '';
        
		// Pre-process variables.
		$nid = $gid;
	
		$query = 'SELECT c.cid as cid, c.pid, c.nid, c.subject, c.comment, c.format, c.timestamp, c.name, c.mail, c.homepage, u.uid, u.name AS registered_name, u.signature, u.signature_format, u.picture, u.data, c.thread, c.status FROM {comments} c INNER JOIN {users} u ON c.uid = u.uid WHERE c.nid = %d and c.uid=%d';
        
		// Start a form, for use with comment control.
		$result = db_query($query,$gid, $uid);

		$num_rows = FALSE;
		
		global $base_path;
		$a= null; 
		while ($comment = db_fetch_object($result)) {
			$num_rows = TRUE;
            $a = $comment; 
		}

		if($num_rows) {           
			return $a; 
		} else {   
			return FALSE;
		}	
}

/* render the comments when viewing the forum topic
**
*/
function group_extensions_comment_render($node, $current_group,$cid = 0) {
  global $user;
    
    $output ='';
  if (user_access('access comments')) {
    // Pre-process variables.
    $nid = $node->nid;
    if (empty($nid)) {
      $nid = 0;
    }
    $comments_per_page = 20;


      // Multiple comment view
      $query_count = 'SELECT COUNT(*) FROM {comments} c WHERE c.nid = %d';
      $query = 'SELECT c.cid as cid, c.pid, c.nid, c.subject, c.comment, c.format, c.timestamp, c.name, c.mail, c.homepage, u.uid, u.name AS registered_name, u.signature, u.signature_format, u.picture, u.data, c.thread, c.status FROM {comments} c INNER JOIN {users} u ON c.uid = u.uid WHERE c.nid = %d';

      $query_args = array($nid);
      if (!user_access('administer comments')) {
        $query .= ' AND c.status = %d';
        $query_count .= ' AND c.status = %d';
        $query_args[] = COMMENT_PUBLISHED;
      }

      if ($order == COMMENT_ORDER_NEWEST_FIRST) {
        if ($mode == COMMENT_MODE_FLAT_COLLAPSED || $mode == COMMENT_MODE_FLAT_EXPANDED) {
          $query .= ' ORDER BY c.cid DESC';
        }
        else {
          $query .= ' ORDER BY c.thread DESC';
        }
      }
      else if ($order == COMMENT_ORDER_OLDEST_FIRST) {
        if ($mode == COMMENT_MODE_FLAT_COLLAPSED || $mode == COMMENT_MODE_FLAT_EXPANDED) {
          $query .= ' ORDER BY c.cid';
        }
        else {
          // See comment above. Analysis reveals that this doesn't cost too
          // much. It scales much much better than having the whole comment
          // structure.
          $query .= ' ORDER BY SUBSTRING(c.thread, 1, (LENGTH(c.thread) - 1))';
        }
      }
      $query = db_rewrite_sql($query, 'c', 'cid');
      $query_count = db_rewrite_sql($query_count, 'c', 'cid');

      // Start a form, for use with comment control.
      $result = pager_query($query, $comments_per_page, 0, $query_count, $query_args);

      $divs = 0;
      $num_rows = FALSE;
      $comments = '';
     
      while ($comment = db_fetch_object($result)) {
        $comment = drupal_unpack($comment);
         $topic=array(
                    'id'=>$comment->cid, // nid or cid
                    'ispost'=>0,
                    'name'=>$comment->registered_name,
                    'uid'=>$comment->uid,
                    'picture' => $comment->picture, 
                    'grouprole' => og_is_group_admin($current_group,$comment->uid) ? t('Group Organizer') : t('Group Member'),
                    'location'=>'',
                    'created'=>$comment->timestamp,
                    'content'=>$comment->comment,
        );
        $output .=  theme('forum_topic_show',$current_group,  $topic);
      }
      

      
   
  
  }
  return $output;
}
