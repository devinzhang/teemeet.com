<?php


/*  This module define the base of each user type profile, it include the following use cases.
 *  
 *  1) user registered related function for example, soponsor regisered, 
*/


define('GROUP_NODE_TYPE', 'group'); //节点类型
define('SPONSORSHIPS_TABLE', 'sponsorships'); //节点类型

define('SPONSORSHIPS_STATUS_EXPIRE', 0); //节点类型
define('SPONSORSHIPS_STATUS_OK', 1); //节点类型
define('SPONSORSHIPS_STATUS_PENDDING', 2); //节点类型



function sponsor_perm() {
    return array(
        'admin sponsor',
        'create sponsor');
}


/**
 * Implementation of hook_menu().
 */
function sponsor_menu() {
  $items = array();
   $items['sponsorships'] = array(
    	'title' => t('Sponsor local Meetup Groups'),
        'page callback' => 'sponsor_sponsorships_page',
        'page arguments' => null,   
        'type' => MENU_LOCAL_TASK,        
        'access callback' =>true,
        
        'file' => 'sponsorships.page.inc',
        'weight' => -13,
    ); 
    
    
    //create a sponsor
    $items['sponsor/create'] = array(
    	'title' => t('Create Sponsor'),
        'page callback' => 'sponsor_create_sponsor',
        'page arguments' => null,                
        'access callback' =>true,
        'type' => MENU_CALLBACK, 
        'file' => 'sponsorships.page.inc',
    );
    
    $items['perk/create'] = array(
    	'title' => t('Create Perk'),
        'page callback' => 'sponsor_create_perk',
        'page arguments' => null,                
        'access callback' =>true,
        'type' => MENU_CALLBACK, 
        'file' => 'sponsorships.page.inc',
    );
    
    $items['sponsor/findgroup'] = array(
    	'title' => t('Find a group to sponsor'),
        'page callback' => 'sponsor_find_group',
        'page arguments' => null,                
        'access callback' =>true,
        'type' => MENU_CALLBACK, 
        'file' => 'sponsorships.page.inc',
    );
    
    $items['sponsor/sponsorgroup/%'] = array(
    	'title' => t('Ask to sponsor this group'),
        'page callback' => 'sponsor_ask_sponsor_the_group',
        'page arguments' => array(2),                
        'access callback' =>true,
        'type' => MENU_CALLBACK, 
        'file' => 'sponsorships.page.inc',
    );
    
	$items['sponsor/%/list'] = array(
    	'title' => t('Sponsor'),
        'page callback' => 'sponsor_sponsorship_list',
        'page arguments' => array(1),                
        'access callback' =>true,
        'type' => MENU_CALLBACK, 
        'file' => 'sponsorships.page.inc',
    );
	
    $items['sponsor/approvesponsor/%'] = array(
    	'title' => t('Approve to sponsor this group'),
        'page callback' => 'sponsor_approve_sponsor_the_group',
        'page arguments' => array(2),                
        'access callback' =>true,
        'type' => MENU_CALLBACK, 
        'file' => 'sponsorships.page.inc',
    );
    
    $items['sponsor/removesponsor/%'] = array(
    	'title' => t('Remove the sponsorship of this group'),
        'page callback' => 'sponsor_remove_sponsor_the_group',
        'page arguments' => array(2),                
        'access callback' =>true,
        'type' => MENU_CALLBACK, 
        'file' => 'sponsorships.page.inc',
    );
    
    
    
  return $items;
}


function sponsor_is_login($uid){
    return $uid; 
}

/**
 * Implementation of hook_theme().
 *
 *
 */
function sponsor_theme() {
  return array(
  
    'sponsor_sponsorship_landing' => array(
	  'template' => 'sponsor-sponsorship-landing',
      'arguments' => array(
            'promoted-sponsors'=>null,
            'sponsor'=>null,
        ),
	),
    
	'sponsor_sponsorship_list' => array(
	  'template' => 'sponsor-sponsorship-list',
      'arguments' => array(            
            'sponsors'=>null,
        ),
	),
    
  );
}


/**
 * Implementation of hook_user().
 */
function sponsor_user($op, &$edit, &$account, $category = NULL) {
	switch($op) {
		case 'register':
		
			break;

        case 'view' :
           
		break;
        
        case 'load' :
           if(in_array('sponsor', array_values($account->roles))) {
            $account->sponsorgroups = sponsor_get_sponsored_groups($account->uid);
           }
           
		break;
        
        
        
		case 'login':
               
                $_REQUEST['destination'] = 'home';
                foreach($account->og_groups as $gid=>$group){
                    $pendding_request = sponsor_check_sponsorship_pendding_request($gid);
                        if($pendding_request != false && !empty($sponsor_request) ) {
                           foreach($pendding_request as $key=> $sponsor){
                            
                           }
                           
                    }
               }
			break;
		}
}


 /* impl , hook_nodeapi 
 **  After the user create a sponsor node,  if the user is anomyous , then create a new user firstly, then 
 **  change the node author before save to the db
 **
 */
function sponsor_nodeapi(&$node, $op, $teaser, $page) {
    global $user; 
    if(og_is_group_type($node->type)) {
        switch( $op ) {
            case 'load':
            $sponsor_list = sponsor_get_group_sponsors($node->nid);
            $node->sponsors = $sponsor_list;            
            break;
            case 'view':
			
            $sponsor_request = sponsor_check_sponsorship_pendding_request($node->nid); 
            if($sponsor_request != false && !empty($sponsor_request)){
                 foreach($sponsor_request as $sid => $sponsor){
                    $usr = user_load($sponsor['uid']); 
                    $sponsor_link = l($usr->name, 'node/'.$sponsor['nid'] );
                    $group_link = l($node->title, $node->path); 
                    $destination = drupal_get_destination();
                    $agree_link = l( t('Approve'),'sponsor/approvesponsor/'.$sid,array('query'=> $destination));
                    drupal_set_message( $sponsor_link. t('want to sponosr your group').$group_link.'  '.$agree_link); 
                 }
            }
            
            break; 
       }
    }
	
	 if($node->type == 'sponsor') {
        switch( $op ) {
            case 'load':
            $sponsor_list = sponsor_get_sponsored_groups($node->uid);
            $node->sponsorships = $sponsor_list;            
            break;

       }
    }
	
            
}


/* hook_block
 *
 */
 

function sponsor_block($op = 'list', $delta = 0, $edit = array()){
	switch($op){
		case 'list':			
			
            
            $blocks[0]['info']=t('Sponsor Business Summary');
			$blocks[0]['cache']=BLOCK_NO_CACHE;

            
            
	
			return $blocks;
		case 'view':
			switch($delta){
				
                case 0:
					$block['subject']=t('Sponsor Business Summary');
					$block['content']= sponsor_business_summary();

					break;				

                    
			}
			return $block;
	}
}


function sponsor_business_summary(){
    $output = '';
    global $user; 
    $my_sponsor = node_load(array('uid'=>$user->uid, 'type'=>'sponsor'));
    $group_summary = sponsor_get_sponsored_group_summary($user->uid);
    if($my_sponsor){
        $output .= '<div id="D_memberHomeHeader" class="D_box clearfix">';
		 $output .= '<dl class="sponsorLetterhead clearfix vcard" id="sponsorInfo">';

            $output .= '<dt class="fn org url"></dt><h2>'.$my_sponsor->title.'</h2>';
                $output .= '<dd class="startDate">自'.format_date($my_sponsor->created,'custom','Y-m-d').'成为赞助商</dd>';
                $output .= '<dt class="name">'.$user->name.'</dt>';
                $output .= '<dd class="adr">';
                $output .= '<span class="street-address">'.$my_sponsor->field_sponsor_address[0]['street'].'</span>';
                $output .= '<span class="locality">'.$my_sponsor->field_sponsor_address[0]['city'].'</span>&nbsp';
                $output .= '<abbr title="Maryland" class="region">'.$my_sponsor->field_sponsor_address[0]['province'].'</abbr>&nbsp';
                $output .= '<span class="country-name">'.$my_sponsor->field_sponsor_address[0]['country'].'</span>';
                $output .= '</dd>';
                $output .= '</dl>';
                $output .= '<div id="letterheadMeta">';
			$output .= '<h2 class="lightHeading">';
			$output .= '赞助了 <strong id="count_members">'.$group_summary['member_counter'].'</strong> '.t('members in').' <strong id="count_activeGroups">'.$group_summary['group_counter'].'</strong> '.t('Teemeet Groups');
			$output .= '</h2>';
			$output .= '<a href="'.url('node/'.$my_sponsor->nid).'" id="visitSponsorHome" class="clearfix">
				<img alt="Home" class="D_icon" src="http://img2.meetupstatic.com/8689168192329930562/img/house.gif"> 
				<span>查看你的赞助商页面</span>
				<em></em>
			</a>

			<ul class="D_actions" id="editSponsorAccount">
				<li class="canDo"> <a class="sprite sprite_action pencil_icon" href="'.url('node/'.$my_sponsor->nid.'/edit').'">'.t('Edit Your Info').'</a> </li>
			</ul>
		</div>
	</div>';
    }
    
    return $output; 
}



/*helper function ,called by other functions
**@param $gid, the group nid
**@return , if there is a pendding quest, return the pendding array, otherwise, false;  
*/

function sponsor_check_sponsorship_pendding_request($gid){
    $result = db_query('select sid, uid, nid, status from {'.SPONSORSHIPS_TABLE.'} where status =%d and gid=%d',SPONSORSHIPS_STATUS_PENDDING, $gid);
    $pendding_request = array();
    $has_result = false; 
    while($item = db_fetch_object($result)){
        $pendding_request[$item->sid] = array('uid'=>$item->uid, 'nid' => $item->nid);
        $has_result = true; 
    }
    if($has_result) {
    return $pendding_request;
    } else {
    return false;
    }
    
}

/* Get a user sponsored group summary, includeing the group count and members count here we only count the approved group
** @param $user, the sponosr user id
** @return , an array, with group number and account number.
*/
function sponsor_get_sponsored_group_summary($uid){
	$groups = sponsor_get_sponsored_groups($uid);
	$group_number = 0;
	$group_member_number = 0;
		
	if(!empty($groups)) {
		$group_number = sizeof($groups[1]);
		$group_member_number = 0;
		if(!empty($groups[1])) {
			foreach($groups[1] as $gid =>$group){
				$group_node = node_load($gid);
				$group_member_number += $group_node->og_member_count;
			
			}
		}
		
	} 
	
	return array('group_counter'=> $group_number, 'member_counter'=> $group_member_number);
	
}

/* Get a user sponsored group list
** @param $uid, the sponsor user uid
**
*/
function sponsor_get_sponsored_groups($uid){
   
    $result = db_query('select sid, gid, status from '.SPONSORSHIPS_TABLE.' where uid=%d', $uid);
    $groups = array(); 
    while($sponsorship = db_fetch_array($result)) {
		$group = node_load($sponsorship['gid']); 
        $groups[$sponsorship['status']][$sponsorship['gid']] = array('sid'=>$sponsorship['sid'], 'path'=>$group->path, 'title'=>$group->title);
    }
    
    return $groups;
}

/* to get a groups sponsor list
**
**
*/
function sponsor_get_group_sponsors($gid){
    $result = db_query('select * from '.SPONSORSHIPS_TABLE.' where gid=%d', $gid);
    $sponsor_list = array(); 
    while($sponsor = db_fetch_array($result)) {
        $sponsor_list[$sponsor['nid']] = $sponsor;
    }
    
    return $sponsor_list;
}
/* create a new user programmaticlly
** @param , $values,an input array, keyed by mail, password
*/
function sponsor_create_user($values, $roles) {
    $name = $values['name'];
   $pass = $values['pass'];
   $email = $values['mail'];
   $newUser = array(
  		'name' =>$name,
  		'pass' => $pass, // note: do not md5 the password
  		'mail' => $email,
  		'roles' => $roles,
  		'status' => 1,
   		
  	);
	$user=user_save(null, $newUser);

	if(!$user){ //if user save fail
	$ret = 'fail';
	$uid = 0;	
	}
	else{
	$uid = $user->uid;
	$ret = t('uid=').$user->uid;	
	}

  $return=array(
  'name' => $name,
  'email' => $email,
  'pass' => $pass,
  'result' => $ret,
  'uid' => $uid,

  );

  return $return;
}


/* create a new sponsor node programmaticlly
*/

function sponsor_create_sponosr_node($values){
  $edit = array();
  $edit['type'] = 'sponsor';
  $edit['uid'] = $values['uid'];// user who would be called the  creator of the node
  $edit['name'] = $name;
  $edit['promote'] = 0;
  $edit['format'] = FILTER_FORMAT_DEFAULT;
  $edit['status'] = 1;
  $edit['title'] = t('Confidential Signature: ').$name;

  node_validate($edit);
  $node = node_submit($edit);
  node_save($node);
}