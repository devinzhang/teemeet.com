<?php


/*  This module allow each group has its own albums, it includes the following.
 *  1) The orgnazor can create a new album,
 *  2) all the groups members can add photo into the album.
 *  3)  tag a picture. see http://djpate.com/2011/01/14/jtag-a-jquery-plugin-to-tag-pictures-more/
 *  4) 
 * how this was designed?
 * 1) firstly, create a new content type named 'album', 
 * 2) create a new new content type named "photo", which a cck filed  imagefiled, why need this ? since each photo need to be commentd.
 * 3) table 1:  associate the group with the albums table 2:  associate the album and photo node,  
 *  
 * before use this module, you must create two node type , one was 'album' , the other is 'photo', in the future , this module
 * should create them automatically.
*/

define("OG_ALBUM_TABLE", "og_album");
define("OG_ALBUM_PHOTOS_TABLE", "og_album_photos");
define("OG_ALBUM_PHOTO_TAG)TABLE", "og_album_photo_tag");
define('OG_ALBUM_MODULE_PATH', drupal_get_path('module', 'og_album'));



function og_album_perm() {
    return array(
        'admin group album',
        'create group album',
        'upload photo',
        );
}


/**
 * Implementation of hook_menu().
 */
function og_album_menu() {
    
    $items['album/ingroup/%'] = array(
    	'title' => t('Album'),
        'page callback' => 'og_album_album_list',
        'page arguments' => array(2),   
        'type' => MENU_CALLBACK,                
        'access arguments' => array('access content'), 
        'file' => 'og_album.page.inc',     
        
    );
    
    $items['album/ingroup/%/upload'] = array(
    	'title' => t('Album'),
        'page callback' => 'og_album_photo_upload',
        'page arguments' => array(2),   
        'type' => MENU_CALLBACK,
        'access callback' => 'og_album_is_group_admin',        
        'access arguments' => array(2), 
        'file' => 'og_album.page.inc',     
        
    );
    $items['album/%/upload'] = array(
    	'title' => t('Upload photo'),
        'page callback' => 'og_album_upload_directly',
        'page arguments' => array(1),   
        'type' => MENU_CALLBACK,                
        'access arguments' => array('upload photo'), 
        'file' => 'og_album.page.inc',     
        
    );
    
     $items['album/ajax/photo/%'] = array(
    	'title' => t('Get a photo node information'),
        'page callback' => 'og_album_ajax_get_photo',
        'page arguments' => array(3),   
        'type' => MENU_CALLBACK,                
        'access arguments' => array('upload photo'), 
        'file' => 'og_album.page.inc',     
        
    );
    
    
    
    /*admin part*/
     $items['admin/settings/og_album'] = array(
	    'title' => t('Group Albums'),
	    
	    'page callback' => 'drupal_get_form',
	    'page arguments' => array('og_album_admin_setting_form'),
	    'access arguments' => array('admin multi avator'),
  );
  
  
  return $items;
}

/* if the current use is the group admin 
*
*/

function og_album_is_group_admin($gid){
$node = node_load($gid); 
return og_is_group_admin($node); 
}

function og_album_is_login($uid){
    return $uid; 
}

/* if the user is the image owner */
function og_album_is_owner($uid,$fid){
    global $user;
    return $user->uid == $uid; 
}

/* if the user is the image owner */
function og_album_is_album_admin($uid,$node){
    
    return $node->uid == $uid; 
}


/**
 * Implementation of hook_theme().
 *
 *
 */
function og_album_theme() {
  return array(
   'og_album_list' => array(  // theme one album list
	  'template' => 'og_album-list',
      'arguments' => array(
            'current_group'=>null,
            'albums'=>null, 
            'is_group_admin'=>FALSE, // if the current user was the group onwer
            
        ),
       'path'=>drupal_get_path('module','og_album').'/tpl',
	),
  'og_album_album' => array(  // theme one album
	  'template' => 'og_album-album',
      'arguments' => array(
            'album'=>null,             
            'photos'=>null, 
            'is_album_admin'=>FALSE, // if the current user was a album admin
        ),
       'path'=>drupal_get_path('module','og_album').'/tpl',
	),
	
  );
}


/*hook_nodeapi
**
**
*/
function og_album_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  switch ($op) {
    case 'delete':
    if($node->type == 'photo'){
        db_query("DELETE FROM ".OG_ALBUM_PHOTOS_TABLE." where pid=%d", $node->nid);
    }
    if($node->type == 'album'){
        db_query("DELETE FROM ".OG_ALBUM_TABLE." where aid=%d", $node->nid);
    }    
    
      break;
    case 'load':    
        if($node->type == 'album'){
            
            $node->album = og_album_get_albums_attributes($node->nid);
        }
        if($node->type == 'photo'){
            $node->photo = og_album_get_photo_attributes($node->nid);
        }
        
    break;
    
    case 'view':    
        if($node->type == 'album'){
            drupal_set_title('');
            drupal_add_js(drupal_get_path('module', 'og_album').'/js/jcarousellite_1.0.1.min.js');
            drupal_add_js(drupal_get_path('module', 'og_album').'/js/og_album.js');
            drupal_add_css(drupal_get_path('module','og_album').'/css/og_album.css');
            $photos = og_album_get_photos($node->nid);  
            global $user; 
            $is_album_admin = og_album_is_album_admin($user->uid, $node); 
            $node->content['slider']= array(
                '#value'=> '<div style="display:none;"> <div id="add-album-photo" >'.drupal_get_form('og_album_upload_photo_directly_form', $node->nid).'</div></div>'. theme('og_album_album', $node, $photos,$is_album_admin),
                
            );
        }
        
        if($node->nid ==144){
        
        $img_path = $node->field_group_photo[0]['filepath'];
         $node->content['slider']= array(
                '#value'=> theme('imagecache','album_cover_150x115', $img_path,'','', array('class'=>'album-thumb')),
                
            ); 
        }
      break;      
      
    }
}


/*Helper function to retrieve the information  */

/*  retrieve one groups's all albums
 *  @param $gid, the group node nid
 *  @param $summary, if TRUE, only return the album nid and title, otherwise, return all the node object
 *  @return , an array, keyed by album nid, the value depend on the $summary
*/
function og_album_get_albums($gid, $summary = FALSE) {
   
   $sql_result = db_query("SELECT * FROM ".OG_ALBUM_TABLE." where gid=%d ", $gid);

  $rows=array();
  if($sql_result) {
      while ($data = db_fetch_object($sql_result)) {  
        
      $node = node_load($data->aid); 
          if($summary) {
            $rows[$data->aid]= $node->title;
          }else{
            $rows[$data->aid]= $node;
          } 
        }
    }      
    return $rows;
}

/* get album photos
** @param $aid, the album nid
**  @param $summary, if TRUE, only return the album nid and title, otherwise, return all the node object
 *  @return , an array, keyed by photo nid, the value depend on the $summary
*
*/
function og_album_get_photos($aid, $summary = FALSE) {
   
  $sql_result = db_query("SELECT * FROM ".OG_ALBUM_PHOTOS_TABLE." where aid=%d order by aid DESC", $aid);

  $rows=array();
  if($sql_result) {
      while ($data = db_fetch_object($sql_result)) {  
        
      $node = node_load($data->pid); 
          if($summary) {
            $rows[$data->pid]= $node->title;
          }else{
            $rows[$data->pid]= $node;
          } 
        }
    }      
    return $rows;
}

/* return the albums attributes. 
 ** such photo number, cover_image path
 
 **
*/ 
function og_album_get_albums_attributes($aid){
    $attributes = db_fetch_array(db_query("select * from ".OG_ALBUM_TABLE." where aid=%d", $aid));
    $photo_amout = db_result(db_query("select count(*) from ".OG_ALBUM_PHOTOS_TABLE." where aid=%d", $aid));
    $img_path=db_result(db_query("select f.filepath from {files} as f where f.fid=%d ", $attributes['cover_fid']));
    
    
    $album=array();
    $album['photo_size'] = $photo_amout ;
    $real_path = $img_path;
    
   // $album['cover_image_path'] = theme('imagecache','album_cover_150x115', $real_path,'','', array('class'=>'album-thumb'));
    $album['cover_image_path'] = $img_path; 
   if(is_array($attributes)){
    $album = array_merge($album, $attributes);
    }
    return $album;
}


/* return the photo attributes. 
 ** such photo filepath 
 **
*/ 
function og_album_get_photo_attributes($pid){
    $attributes = db_fetch_array(db_query("select * from ".OG_ALBUM_PHOTOS_TABLE." where pid=%d", $pid));
    
    $img_path=db_result(db_query("select f.filepath from {files} as f where f.fid=%d ", $attributes['fid']));
    $photo=array();
    $photo['cover_image_path'] = theme('imagecache','album_cover_150x115', $real_path,'','', array('class'=>'album-thumb'));
    $photo['filepath'] = $img_path; 
   if(is_array($attributes)){
    $photo = array_merge($photo, $attributes);
    }
    return $photo;
}



/* submit a new image form 
 *
 */
 
function og_album_upload_photo_directly_form(&$form_state, $aid) {
 $form=array();   
 $form['image'] = array(
    '#type' => 'image_upload_element',
    '#title' => t('Add photo'),
    '#default_value' => '', // {files} object
    '#image_preview_size' => '200x200',
    '#file_validators' => array(         
    'file_validate_extensions' => array('txt gif jpg jpeg'),
        ),
  );
  $form['aid'] = array(
    '#type' => 'hidden', 
    '#value' => $aid
    
  );
  
$form['submit'] = array(
    '#type' => 'submit', 
    '#value' => t('Submit'),
);

  return $form;
}

function og_album_upload_photo_directly_form_submit($form, &$form_state) {
    $value = $form_state['values'];
    $aid = $value['aid'];
    global $user; 
    
    if($value['image']) {
      $image_id = upload_element_save($value['image'], 'upload_element', FILE_EXISTS_RENAME, 'imagecache_preset');
      $img_path=db_result(db_query("select f.filepath from {files} as f where f.fid=%d ", $image_id));
      $pid = og_album_create_photo_node($img_path,$user); 
      db_query("INSERT INTO ".OG_ALBUM_PHOTOS_TABLE." (pid, aid, fid) VALUES (%d, %d, %d)", $pid, $aid, $image_id);
      
    }
  
  drupal_goto('node/'.$aid);
                    
}



/*create a album node
**
*/

function og_album_create_album_node($title,$user) {
     // add node properties
    $newNode = new StdClass;
    $newNode->type = 'album';
    $newNode->title = $title;
    $newNode->uid = $user->uid;
    $newNode->name = $user->name;
    $newNode->created = strtotime("now");
    $newNode->changed = strtotime("now");
    $newNode->status = 1;
    $newNode->comment = 0;
    $newNode->promote = 0;
    $newNode->moderate = 0;
    $newNode->sticky = 0;

    // add CCK field data
 //   $newNode->field_donor_status[0]['value']='Available';
  
    // save node
    node_save($newNode);
    return $newNode->nid;
}


/*create a album node
**
*/

function og_album_create_photo_node($file_path,$user) {
     // add node properties
    $newNode = new StdClass;
    $newNode->type = 'photo';
    $newNode->title = '';
    $newNode->uid = $user->uid;
    $newNode->name = $user->name;
    $newNode->created = strtotime("now");
    $newNode->changed = strtotime("now");
    $newNode->status = 1;
    $newNode->comment = 1;
    $newNode->promote = 0;
    $newNode->moderate = 0;
    $newNode->sticky = 0;

   /* // add CCK field data
 /////// FIELD_PHOTO ///////////////////////////////////////
	// Image file path.
	//$image = file_directory_path() . '/panstar/' . $item[1];
    $image = $file_path; 
	// Load up the CCK field. First parameter image field name and second parameter node type. It can be chnaged to any field name and also and node type.
	$field = content_fields('field_photo', 'photo');
	// Load up the appropriate validators
	$validators = array_merge(filefield_widget_upload_validators($field), imagefield_widget_upload_validators($field));
	// Store file path.
	$files_path = filefield_widget_file_path($field);
	// Create the file object, replace existing file with new file as source and dest are the same
	$file = field_file_save_file($image, $validators, $files_path, FILE_EXISTS_REPLACE);
	// put the file into node image field.
	$node->field_photo = array( 0 => $file);
*/
  
    // save node
    node_save($newNode);
    return $newNode->nid;
}


/* admin part */
function og_album_admin_setting_form(){
  $form = array();
  $form['group_album_limit'] = array(
        '#type' => 'textfield',
        '#title' => t('How many albums allowed for each group?'),
        '#default_value' => variable_get('group_album_limit',0),
        '#description' => t('This setting lets you set how many group album can be created by user, 0 means no limitation'),
   );
  return system_settings_form($form);
}
