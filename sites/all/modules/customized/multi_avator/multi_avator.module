<?php


/*  This module define the base of each user type profile, it include the following use cases.
 *  1) The administrator can create a new node type served as a profile type, this should linked to one of role,
 *      this should be configurable on the node type edit page.
 *  2) when this kind of user node was created, then all the profile node should be created. this module store the info into the DB
 *  3) Display a block 'profile data' to view all the profiels  for a user
*/

define("multi_avator_TABLE", "homepage");
define('MULITIAVATOR_PATH', drupal_get_path('module', 'multi_avator'));



function multi_avator_perm() {
    return array(
        'admin multi avator',
        'create mulit-avator');
}


/**
 * Implementation of hook_menu().
 */
function multi_avator_menu() {
  $items = array();
        $items['user/%user/photos'] = array(
    	'title' => t('Photos'),
        'page callback' => 'multi_avator_member_photos',
        'page arguments' => null,   
        'type' => MENU_LOCAL_TASK,        
        'access callback' => 'multi_avator_is_login',
        'access arguments' => array(1),   
        'weight' => -12,
    );  
   
    $items['multi_avator/set_primary/%/%'] = array(
    	'title' => t('Photos'),
        'page callback' => 'multi_avator_set_primary',
        'page arguments' => array(2,3),   
        'type' => MENU_CALLBACK,        
        'access callback' => 'multi_avator_is_owner',
        'access arguments' => array(2,3),   
        
    );  
    $items['multi_avator/delete/%/%'] = array(
    	'title' => t('Photos'),
        'page callback' => 'multi_avator_delete_image',
        'page arguments' => array(2,3),   
        'type' => MENU_CALLBACK,        
        'access callback' => 'multi_avator_is_owner',
        'access arguments' => array(2,3),   
        
    );
    
    /*admin part*/
     $items['admin/settings/multi_avator'] = array(
	    'title' => t('Multi Avator'),
	    
	    'page callback' => 'drupal_get_form',
	    'page arguments' => array('multi_avator_admin_setting_form'),
	    'access arguments' => array('admin multi avator'),
  );
  
  
  return $items;
}


function multi_avator_is_login($uid){
    return $uid; 
}

/* if the user is the image owner */
function multi_avator_is_owner($uid,$fid){
    global $user;
    return $user->uid == $uid; 
}

/**
 * Implementation of hook_theme().
 *
 *
 */
function multi_avator_theme() {
  return array(
   'multi_avator_avator' => array(  // theme one avator profile
	  'template' => 'multi_avator-avator',
      'arguments' => array(
            'uid'=>0,
            'imagepath'=>'',
            'pirmay'=>0,
            'fid'=>0,
            
        ),
	),

	
  );
}


/**
 * Implementation of hook_user().
 */
function multi_avator_user($op, &$edit, &$account, $category = NULL) {
	switch($op) {
		case 'view' :
		
		break;
		case 'login':
               
        break;
        case 'load':
            $sql = "select f.filepath from {files} as f inner join {multi_avator} as ma on f.fid=ma.image_id where ma.pirmary=1 and ma.uid=%d";
            $ret = db_result(db_query($sql, $account->uid));
           $account->picture= $ret;    
        break;
		}
}

/* display the user avator */

function multi_avator_member_photos() {
    $output ='';
    drupal_add_css(MULITIAVATOR_PATH.'/multi_avator.css');
    drupal_add_js(MULITIAVATOR_PATH.'/multi_avator.js');
    
    
    $output .= '<ul style="margin-bottom: 1em;" class="D_actions hasIcons memberPhoto"> 
                <li class="canDo">
                    <a id="add-profile-picture" class="colorbox-inline D_signal D_signal_appear_to_addProfilePhoto sprite sprite_action add_icon" 
                    href="?width=600&height=350&inline=true#add-profile-avator">
                        添加头像
                    </a>
                </li>';

  /*  $output .= ' <li class="canDo">
                <a class="sprite sprite_action delete_icon" href="">Don\'t show main photo</a>
                </li>

                <li title="&quot;Hidden&quot; means only your main profile photo and tagged photos will be visible" class="canDo">
                <a class="D_signal D_signal_appear_to_confirmHideProfilePhotos sprite sprite_action monitor_icon" id="photosHideSubmit">Hide profile photos </a>
                </li>';
	*/
    $output .= '</ul>'; 

    global $user;
    
    global $base_url;
    $output .= '<ul id="memberOwnPhotosListWider">';
    $avators = multi_avator_get_avators($user->uid); 
        foreach ($avators as $seq=>$avator) {
            $fid = $avator['fid'];
            $class = $avator['primary_avator'] ? 'primary-avator' : 'not-primary-avator';
            $output .= '<li class="item '.$class.'">';
            $output .= theme('multi_avator_avator', $user->uid, $base_url.'/'.$avator['path'], $avator['primary_avator'],$avator['fid']);
            $output .= '</li>';
        //    $output .= '<div style="display:none;"> <div id="confirm-delete-'.$user->uid.'-'.$fid.'" >'.drupal_get_form('multi_avator_delete_image_confirm_form', $user->uid, $fid).'</div></div>'; 
            
        }
     $output .= '</ul>';    
    $output .= '<div style="display:none;"> <div id="add-profile-avator" >'.drupal_get_form('multi_avator_form', $user->uid).'</div></div>'; 
    return $output; 
}


/*menu callback 
*@param, $uid, the owner uid
*@param  $fid, the image file id
*@param $state, the target status 0: not-primary, 1 for primay

*/

function multi_avator_set_primary($uid,$fid) {
    $output = '';
    $ret = db_query("update {multi_avator} set pirmary=0 where uid=%d", $uid );
    
    $ret = db_query("update {multi_avator} set pirmary=1 where uid=%d and image_id =%d", $uid,$fid );
    if($ret) {
        drupal_set_message( 'set primary');
    }
    //$img_path=db_result(db_query("select f.filepath from {files} as f join {multi_avator} as ma on f.fid=ma.image_id where ma.uid=%d and ma.image_id=%d ", $uid,$fid));
    $img_path=db_result(db_query("select f.filepath from {files} as f where f.fid=%d ", $fid));
    
    $account = user_load($uid);        
        $account->picture = $img_path;
        user_save($account,array('picture'=>$img_path));
    drupal_goto('user/'.$uid.'/photos');
}


/**
 * hook_preprocess_user_picture
 *
 * The $variables array contains the following arguments:
 * - $account
 *
 * @see user-picture.tpl.php
 */
function multi_avator_preprocess_user_picture(&$variables) {
  $variables['picture'] = '';
  if (variable_get('user_pictures', 0)) {
    $account = $variables['account'];
    $img_path=db_result(db_query("select f.filepath from {files} as f join {multi_avator} as ma on f.fid=ma.image_id where ma.uid=%d and ma.pirmary=%d ", $account->uid,1));
    if (isset($img_path) && file_exists($img_path)) {
      $picture = $img_path;
    }
    else if (variable_get('user_picture_default', '')) {
      $picture = variable_get('user_picture_default', '');
    }

    if (isset($picture)) {
      $alt = t("@user's picture", array('@user' => $account->name ? $account->name : variable_get('anonymous', t('Anonymous'))));
      $variables['picture'] = theme('image', $picture, $alt, $alt, '', FALSE);
      if (!empty($account->uid) && user_access('access user profiles')) {
        $attributes = array('attributes' => array('title' => t('View user profile.')), 'html' => TRUE);
        $variables['picture'] = l($variables['picture'], "user/$account->uid", $attributes);
      }
    }
  }
  
}




/*menu callback */
function multi_avator_delete_image($uid, $fid){
        
    return drupal_get_form('multi_avator_delete_image_confirm_form',$uid, $fid);
}

function multi_avator_delete_image_confirm_form(&$form_state,$uid, $fid) {
$form['uid'] = array(
    '#type' => 'hidden',
    '#value' => $uid,
   );
   $form['fid'] = array(
    '#type' => 'hidden',
    '#value' => $fid,
   );
   
  $warning = t('Deleting this photo will remove it from all of your Meetup Group profiles.');
  
  return confirm_form($form,
    t('Wait! Are you sure you want to delete this photo?'), 
    'user/'.$uid, 
    $warning, 
    t('Yes,I am sure'), 
    t('Cancel'));
}

function multi_avator_do_delete($uid, $fid) {
    
    $output = '';
    db_query("delete from {multi_avator} where uid=%d and image_id=%d ",$uid, $fid );
    $result = db_query('SELECT * FROM {files} WHERE fid = %d', $fid);
    if ($file = db_fetch_object($result)) {
        if (file_exists($file->filepath)) {
      // If files that exist cannot be deleted, log it for manual deletion.
      if (!file_delete($file->filepath)) {
        watchdog('multi_avator', 'Could not delete file "%path".', array('%path' => $file->filepath), 'error');
      }
    }
    else {
      watchdog('multi_avator', 'Attempting to delete missing file "%path".', array('%path' => $file->filepath), 'error');
    }
  }
  db_query('DELETE FROM {files} WHERE fid = %d', $fid);
  
  drupal_goto('user/'.$uid.'/photos');
}


/* submit a new image form 
 *
 */
 
function multi_avator_form(&$form_state, $uid) {
 $form=array();   
 $form['image'] = array(
    '#type' => 'image_upload_element',
    '#title' => t('Add profile photo'),
    '#description' => _profile_form_explanation($field),
    '#default_value' => '', // {files} object
    '#image_preview_size' => '200x200',
    '#file_validators' => array(         
          'file_validate_extensions' => array('txt gif jpg jpeg'),
        ),
  );
  $form['uid'] = array(
    '#type' => 'hidden', 
    '#value' => $uid
    
  );
  
 $form['primary_avator'] = array(
  '#type' => 'checkbox',
  '#default_value' => 1,
  '#title' => t('Make main profile photo'),
);
$form['submit'] = array(
    '#type' => 'submit', 
    '#value' => t('Submit'),
);

  return $form;
}

function multi_avator_form_submit($form, &$form_state) {
    $value = $form_state['values'];
    $uid = $value['uid'];
    $image_id = 0;
  if($value['image']) {
    $image_id = upload_element_save($value['image'], 'upload_element', FILE_EXISTS_RENAME, 'imagecache_preset');
  }
  if($value['primary_avator']) { //if this is a primary picutre, need to remove all other exist primary
    db_query("update {multi_avator} set pirmary=0 where uid=%d",$uid );
     $img_path=db_result(db_query("select f.filepath from {files} as f where f.fid=%d ", $image_id));
   
    $account = user_load($uid);        
        $account->picture = $img_path;
        user_save($account,array('picture'=>$img_path));
  }else{
    $value['primary_avator'] = 0;
  }
   db_query("INSERT INTO {multi_avator} (uid, image_id, pirmary) VALUES (%d, %d,%d)",
                        $uid,
                        $image_id,
                        $value['primary_avator']
   );
    
                    
}




/*helper function to get an user's all avators 
* @param $uid, the user id
*@return ,an avator array of a user. 

*/

function multi_avator_get_avators($uid){
    $result = db_query("select * from {multi_avator} where uid=%d", $uid);
    $cnt = 0; 
    $avators = array();
    if($result) {
         while ($row = db_fetch_object($result)) {            
            $image = ($row->image_id) ? db_fetch_object(db_query("SELECT * FROM {files} WHERE fid = %d", $row->image_id)) : FALSE;
             $avators[]=array(
                 'path' => $image->filepath,
                 'primary_avator' =>$row->pirmary,
                 'fid' =>$row->image_id,
             );
        }
          return $avators;
    } else {
    return FALSE; 
    }
    
   
}


/* admin part */
function multi_avator_admin_setting_form(){
  $form = array();
  $form['upload_avator_limit'] = array(
        '#type' => 'textfield',
        '#title' => t('How many profile pictures allowed ?'),
        '#default_value' => variable_get('upload_avator_limit',6),
        '#description' => t('This setting lets you set how many profile picutre can be uploaded by user, 0 means no limitation'),
   );
  return system_settings_form($form);
}
